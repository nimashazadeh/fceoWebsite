using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class Settlement_Amoozesh_Institue : System.Web.UI.Page
{
    #region Events
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["Login"] == null || Session["Login"].ToString() == "0")
        {
            Response.Redirect("../../Login.aspx?ReferPage=" + Request.Url.AbsoluteUri);
            return;
        }

        if (!IsPostBack)
        {
            Session["SendBackDataTable_Stl"] = "";
            TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();
            int TaskCode = (int)TSP.DataManager.WorkFlowTask.SaveInstitueInfo;
            WorkFlowTaskManager.FindByTaskCode(TaskCode);
            if (WorkFlowTaskManager.Count > 0)
            {
                string WorkFlowId = WorkFlowTaskManager[0]["WorkFlowId"].ToString();
                ObjdsWorkFlowTask.SelectParameters[0].DefaultValue = WorkFlowId;
            }

            int SettlementConfirmingTaskCode = (int)TSP.DataManager.WorkFlowTask.settlementAgentConfiringInstitue;
            OdbInstitue.SelectParameters[0].DefaultValue = SettlementConfirmingTaskCode.ToString();

            TSP.DataManager.Permission per = TSP.DataManager.InstitueManager.GetUserPermission(int.Parse(Session["Login"].ToString()), (TSP.DataManager.UserType)int.Parse(Session["LoginType"].ToString()));
            btnView.Enabled = per.CanView;
            btnView2.Enabled = per.CanView;
            GridViewInstitue.Visible = per.CanView;

            this.ViewState["BtnView"] = btnView.Enabled;


        }
        if (this.ViewState["BtnView"] != null)
            this.btnView.Enabled = this.btnView2.Enabled = (bool)this.ViewState["BtnView"];
        this.DivReport.Visible = false;
        this.DivReport.Attributes.Add("onclick", "ChangeVisible(this)");
        this.DivReport.Attributes.Add("onmouseover", "ChangeIcon(this)");

    }

    protected void btnView_Click(object sender, EventArgs e)
    {
        int InsId = -1;
        if (GridViewInstitue.FocusedRowIndex > -1)
        {
            DataRow row = GridViewInstitue.GetDataRow(GridViewInstitue.FocusedRowIndex);
            InsId = (int)row["InsId"];
        }
        if (InsId == -1)
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "لطفاً برای مشاهده اطلاعات ابتدا یک رکورد را انتخاب نمائید";

        }
        else
        {
            Response.Redirect("InstitueBasicInfo.aspx?InsId=" + Utility.EncryptQS(InsId.ToString()) + "&PageMode=" + Utility.EncryptQS("View"));
        }

    }

    protected void btnBack_Click(object sender, EventArgs e)
    {
        Response.Redirect("SettlmentHomePage.aspx");
    }

    protected void CallbackPanelWorkFlow_Callback(object source, DevExpress.Web.CallbackEventArgsBase e)
    {
        if (GridViewInstitue.FocusedRowIndex > -1)
        {
            DataRow InstitueRow = GridViewInstitue.GetDataRow(GridViewInstitue.FocusedRowIndex);
            int InsCId = int.Parse(InstitueRow["InsCId"].ToString());
            int InsTableType = (int)TSP.DataManager.TableCodes.Institue;
            if (e.Parameter == "Send")
            {
                SendInstitueDocToNextStep(InsCId);
            }
            else
            {
                SelectSendBackTask(InsTableType, InsCId);
            }
        }
        else
        {
            lblError.Text = "ردیفی انتخاب نشده است.";
        }
    }

    protected void GridViewInstitue_CustomCallback(object sender, DevExpress.Web.ASPxGridViewCustomCallbackEventArgs e)
    {
        GridViewInstitue.DataBind();
    }
    #endregion

    #region Methods
    private void SelectSendBackTask(int TableType, int TableId)
    {
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        TSP.DataManager.WorkFlowManager WorkFlowManager = new TSP.DataManager.WorkFlowManager();
        DataTable dtWorkFlowState = WorkFlowStateManager.SelectLastState(TableType, TableId);
        if (dtWorkFlowState.Rows.Count > 0)
        {
            int CurrentWorkFlowCode = int.Parse(dtWorkFlowState.Rows[0]["WorkFlowCode"].ToString());
            WorkFlowManager.FindByTableType(TableType, CurrentWorkFlowCode);
            if (WorkFlowManager.Count > 0)
            {
                int SendBackTask = WorkFlowStateManager.CalculateSendBackTask(TableType, TableId, (int)Session["Login"]);
                switch (SendBackTask)
                {
                    case -1:
                        PanelSaveSuccessfully.Visible = true;
                        PanelMain.Visible = false;
                        lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                        lblInstitueWarning.Text = "امکان ارسال پرونده به مرحله بعد برای شما وجود ندارد.";
                        break;
                    case -2:
                        PanelSaveSuccessfully.Visible = true;
                        PanelMain.Visible = false;
                        lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                        lblInstitueWarning.Text = "گردش کار پرونده دوره انتخاب شده به اتمام رسیده است.";
                        break;
                    case -3:
                        PanelSaveSuccessfully.Visible = true;
                        PanelMain.Visible = false;
                        lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                        lblInstitueWarning.Text = "عملیاتی برای پرونده دوره انتخاب شده انجام نشده است.";
                        break;
                    default:
                        int WorkFlowId = int.Parse(WorkFlowManager[0]["WorkFlowId"].ToString());
                        DataTable dtSendBackTask = WorkFlowStateManager.SelectSendBackTask(SendBackTask, WorkFlowId);
                        if (dtSendBackTask.Rows.Count > 0)
                        {
                            txtDescription.Text = "";
                            Session["SendBackDataTable_Stl"] = dtSendBackTask;
                            cmbSendBackTask.DataSource = dtSendBackTask;
                            cmbSendBackTask.ValueField = "TaskId";
                            cmbSendBackTask.TextField = "TaskName";
                            cmbSendBackTask.DataBind();
                            cmbSendBackTask.SelectedIndex = 0;
                            PanelSaveSuccessfully.Visible = false;
                            PanelMain.Visible = true;
                        }
                        break;
                }
            }
            else
            {
                PanelSaveSuccessfully.Visible = true;
                PanelMain.Visible = false;
                lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                lblInstitueWarning.Text = "اطلاعات گردش کار تغییر یافته است.";
            }
        }
    }

    private void SendInstitueDocToNextStep(int InsCId)
    {
        TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();
        WorkFlowTaskManager.ClearBeforeFill = true;
        int ConfirmProccessTaskCode = (int)TSP.DataManager.WorkFlowTask.ConfirmInstitueAndEndProccess;
        int RejectProccessTaskCode = (int)TSP.DataManager.WorkFlowTask.RejectInstitueAndEndProccess;
        int ConfirmProccessTaskId = -1;
        int RejectProccessTaskId = -1;
        WorkFlowTaskManager.FindByTaskCode(ConfirmProccessTaskCode);
        if (WorkFlowTaskManager.Count == 1)
        {
            ConfirmProccessTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
        }
        WorkFlowTaskManager.FindByTaskCode(RejectProccessTaskCode);
        if (WorkFlowTaskManager.Count == 1)
        {
            RejectProccessTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
        }
        DataTable dtSendBack = (DataTable)Session["SendBackDataTable_Stl"];
        cmbSendBackTask.DataSource = dtSendBack;
        cmbSendBackTask.ValueField = "TaskId";
        cmbSendBackTask.TextField = "TaskName";
        cmbSendBackTask.DataBind();
        int SelectedTaskId = int.Parse(cmbSendBackTask.SelectedItem.Value.ToString());
        TSP.DataManager.TransactionManager TransactionManager = new TSP.DataManager.TransactionManager();
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager(TransactionManager);
        TSP.DataManager.InstitueCertificateManager InstitueCertificateManager = new TSP.DataManager.InstitueCertificateManager();
        TSP.DataManager.NezamChartManager NezamChartManager = new TSP.DataManager.NezamChartManager();
        TSP.DataManager.NezamMemberChartManager NezamMemberChartManager = new TSP.DataManager.NezamMemberChartManager();

        TransactionManager.Add(WorkFlowStateManager);
        TransactionManager.Add(InstitueCertificateManager);
        TransactionManager.Add(NezamMemberChartManager);
        TransactionManager.Add(NezamChartManager);
        InstitueCertificateManager.ClearBeforeFill = true;

        int NmcId = FindNmcId();
        int TableType = (int)TSP.DataManager.TableCodes.Institue;
        try
        {
            TransactionManager.BeginSave();
            int SendDoc = WorkFlowStateManager.SendDocToNextStep(TableType, InsCId, SelectedTaskId, txtDescription.Text, NmcId, int.Parse(Session["Login"].ToString()));
            switch (SendDoc)
            {
                case -6:
                    TransactionManager.CancelSave();
                    DivReport.Visible = true;
                    lblError.Text = "امکان ارسال پرونده مؤسسه به مرحله جاری وجود ندارد.";
                    break;
                case -4:
                    TransactionManager.CancelSave();
                    lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                    LabelWarning.Text = "خطایی در ذخیره انجام شد.";
                    break;
                case -5:
                    TransactionManager.CancelSave();
                    DivReport.Visible = true;
                    LabelWarning.Text = "برای پرونده انتخاب شده هیچ عملیاتی انجام نشده است.";
                    break;
                default:
                    DataTable dtInsCert = InstitueCertificateManager.SelectLastVersion(InsCId, 0);
                    if (dtInsCert.Rows.Count > 0)
                    {
                        string InsName = dtInsCert.Rows[0]["InsName"].ToString();
                        int InsCrtId = int.Parse(dtInsCert.Rows[0]["InsCId"].ToString());
                        InstitueCertificateManager.FindByCode(InsCrtId);
                        if (InstitueCertificateManager.Count > 0)
                        {
                            if (SelectedTaskId == ConfirmProccessTaskId)
                            {
                                if (Utility.IsDBNullOrNullValue(InstitueCertificateManager[0]["StartDate"]) || Utility.IsDBNullOrNullValue(InstitueCertificateManager[0]["EndDate"]) || Utility.IsDBNullOrNullValue(InstitueCertificateManager[0]["FileNo"]) || Utility.IsDBNullOrNullValue(InstitueCertificateManager[0]["SerialNo"]))
                                {

                                    TransactionManager.CancelSave();
                                    lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                                    lblInstitueWarning.Text = "نظر کارشناسی نماینده مسکن جهت صدور مجوز اشتغال به کار موسسه ثبت نگردیده است.";
                                    PanelMain.ClientVisible = false;
                                    PanelSaveSuccessfully.ClientVisible = true;
                                }
                                else
                                {
                                    InstitueCertificateManager[0].BeginEdit();
                                    InstitueCertificateManager[0]["IsConfirmed"] = 1;
                                    InstitueCertificateManager[0]["UserId"] = Utility.GetCurrentUser_UserId();
                                    InstitueCertificateManager[0]["ModifiedDate"] = DateTime.Now;
                                    InstitueCertificateManager[0].EndEdit();
                                    int cnt = InstitueCertificateManager.Save();
                                    if (cnt > 0)
                                    {
                                        NezamMemberChartManager.FindByMember(InsCId, 6);
                                        if (NezamMemberChartManager.Count == 0)
                                        {
                                            DataRow NCRow = NezamChartManager.NewRow();
                                            NCRow["NcName"] = InsName;
                                            NCRow["ParentId"] = Utility.GetInstitueParentNcId();
                                            NCRow["IsExternal"] = 1;
                                            NCRow["IsDepartment"] = 0;
                                            NCRow["UserId"] = Utility.GetCurrentUser_UserId();
                                            NCRow["ModifiedDate"] = DateTime.Now;

                                            NezamChartManager.AddRow(NCRow);
                                            int SaveNc = NezamChartManager.Save();
                                            if (SaveNc > 0)
                                            {
                                                DataRow NcmRow = NezamMemberChartManager.NewRow();
                                                NcmRow["NcId"] = NezamChartManager[0]["NcId"];
                                                NcmRow["EmpId"] = InsCId;
                                                NcmRow["UltId"] = 6;
                                                NcmRow["IsMaster"] = 1;
                                                NcmRow["StartDate"] = InstitueCertificateManager[0]["StartDate"].ToString();
                                                NcmRow["EndDate"] = InstitueCertificateManager[0]["EndDate"].ToString();
                                                NcmRow["Description"] = "";
                                                NcmRow["IsExternal"] = 0;
                                                NcmRow["UserId"] = Utility.GetCurrentUser_UserId();
                                                NcmRow["ModifiedDate"] = DateTime.Now;

                                                NezamMemberChartManager.AddRow(NcmRow);

                                                int SaveNmc = NezamMemberChartManager.Save();
                                                if (SaveNmc > 0)
                                                {
                                                    InstitueCertificateManager.DataTable.AcceptChanges();
                                                    TransactionManager.EndSave();
                                                    lblInstitueWarning.ForeColor = System.Drawing.Color.Green;
                                                    lblInstitueWarning.Text = "ذخیره انجام شد.";
                                                    PanelMain.ClientVisible = false;
                                                    PanelSaveSuccessfully.ClientVisible = true;
                                                    GridViewInstitue.DataBind();
                                                }
                                                else
                                                {
                                                    TransactionManager.CancelSave();
                                                    lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                                                    lblInstitueWarning.Text = "خطایی در ذخیره انجام شد.";
                                                    PanelMain.ClientVisible = false;
                                                    PanelSaveSuccessfully.ClientVisible = true;
                                                }
                                            }
                                            else
                                            {
                                                TransactionManager.CancelSave();
                                                lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                                                lblInstitueWarning.Text = "خطایی در ذخیره انجام شد.";
                                                PanelMain.ClientVisible = false;
                                                PanelSaveSuccessfully.ClientVisible = true;
                                            }
                                        }
                                        else
                                        {
                                            InstitueCertificateManager.DataTable.AcceptChanges();
                                            TransactionManager.EndSave();
                                            lblInstitueWarning.ForeColor = System.Drawing.Color.Green;
                                            lblInstitueWarning.Text = "ذخیره انجام شد.";
                                            PanelMain.ClientVisible = false;
                                            PanelSaveSuccessfully.ClientVisible = true;
                                            GridViewInstitue.DataBind();
                                        }                                       
                                    }
                                    else
                                    {
                                        TransactionManager.CancelSave();
                                        lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                                        lblInstitueWarning.Text = "خطایی در ذخیره انجام شد.";
                                        PanelMain.ClientVisible = false;
                                        PanelSaveSuccessfully.ClientVisible = true;
                                    }
                                }
                            }
                            else
                            {
                                if (SelectedTaskId == RejectProccessTaskId)
                                {
                                    InstitueCertificateManager[0].BeginEdit();
                                    InstitueCertificateManager[0]["IsConfirmed"] = 2;
                                    InstitueCertificateManager[0]["UserId"] = Utility.GetCurrentUser_UserId();
                                    InstitueCertificateManager[0]["ModifiedDate"] = DateTime.Now;
                                    InstitueCertificateManager[0].EndEdit();
                                    int cnt = InstitueCertificateManager.Save();
                                    if (cnt > 0)
                                    {
                                        TransactionManager.EndSave();
                                        lblInstitueWarning.ForeColor = System.Drawing.Color.Green;
                                        lblInstitueWarning.Text = "ذخیره انجام شد.";
                                        PanelMain.ClientVisible = false;
                                        PanelSaveSuccessfully.ClientVisible = true;
                                        GridViewInstitue.DataBind();
                                    }
                                    else
                                    {
                                        TransactionManager.CancelSave();
                                        lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                                        lblInstitueWarning.Text = "خطایی در ذخیره انجام شد.";
                                        PanelMain.ClientVisible = false;
                                        PanelSaveSuccessfully.ClientVisible = true;
                                    }
                                }
                                else
                                {
                                    TransactionManager.EndSave();
                                    lblInstitueWarning.ForeColor = System.Drawing.Color.Green;
                                    lblInstitueWarning.Text = "ذخیره انجام شد.";
                                    PanelMain.ClientVisible = false;
                                    PanelSaveSuccessfully.ClientVisible = true;
                                    GridViewInstitue.DataBind();
                                }
                            }
                        }
                    }
                    else
                    {
                        TransactionManager.CancelSave();
                        lblInstitueWarning.ForeColor = System.Drawing.Color.Red;
                        lblInstitueWarning.Text = "خطایی در ذخیره انجام شد.";
                        PanelMain.ClientVisible = false;
                        PanelSaveSuccessfully.ClientVisible = true;
                    }
                    break;
            }
            GridViewInstitue.DataBind();
        }
        catch (Exception err)
        {
            TransactionManager.CancelSave();
            lblInstitueWarning.ForeColor = System.Drawing.Color.Green;
            lblInstitueWarning.Text = "خطایی در ذخیره انجام شد.";
            PanelMain.ClientVisible = false;
            PanelSaveSuccessfully.ClientVisible = true;
        }
    }

    private int FindNmcId()
    {
        int UserId = (int)Session["Login"];
        TSP.DataManager.NezamChartManager NezamChartManager = new TSP.DataManager.NezamChartManager();
        TSP.DataManager.LoginManager LoginManager = new TSP.DataManager.LoginManager();

        LoginManager.FindByCode(UserId);
        int NmcId = -1;
        if (LoginManager.Count > 0)
        {
            int EmpId = int.Parse(LoginManager[0]["MeId"].ToString());
            int UltId = int.Parse(LoginManager[0]["UltId"].ToString());
            NezamChartManager.FindByEmpId(EmpId, UltId);
            if (NezamChartManager.Count > 0)
            {
                NmcId = int.Parse(NezamChartManager[0]["NmcId"].ToString());
            }
            else
            {
                DivReport.Visible = true;
                LabelWarning.Text = "کاربری با مشخصات جاری در چارت سازمانی وجود ندارد.";
            }
        }
        else
        {
            Response.Redirect("../../Login.aspx?ReferPage=" + Request.Url.AbsoluteUri);
            return (-1);
        }
        return (NmcId);
    }

    private void CheckWorkFlowPermission(int InsId)
    {
        CheckWorkFlowPermissionForSave(InsId);
    }

    private void CheckWorkFlowPermissionForSave(int InsId)
    {

        int CurrentTaskOrder = -1;
        int TaskOrder = -1;
        //****TableId
        //int PPId = int.Parse(Utility.DecryptQS(PeriodId.Value));
        //****TableType
        int TableType = (int)TSP.DataManager.TableCodes.Institue;

        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();
        TSP.DataManager.NezamMemberChartManager NezamMemberChartManager = new TSP.DataManager.NezamMemberChartManager();
        TSP.DataManager.LoginManager LoginManager = new TSP.DataManager.LoginManager();
        TSP.DataManager.TaskDoerManager TaskDoerManager = new TSP.DataManager.TaskDoerManager();

        DataTable dtWorkFlowState = WorkFlowStateManager.SelectLastState(TableType, InsId);
        if (dtWorkFlowState.Rows.Count > 0)
        {
            CurrentTaskOrder = int.Parse(dtWorkFlowState.Rows[0]["TaskOrder"].ToString());
        }
        int TaskCode = (int)TSP.DataManager.WorkFlowTask.SaveInstitueInfo;
        WorkFlowTaskManager.FindByTaskCode(TaskCode);
        if (WorkFlowTaskManager.Count > 0)
        {
            TaskOrder = int.Parse(WorkFlowTaskManager[0]["TaskOrder"].ToString());
        }

        if (TaskOrder != 0 && CurrentTaskOrder == TaskOrder)
        {
            int SaveInstitueWorkCode = (int)TSP.DataManager.WorkFlowTask.SaveInstitueInfo;
            WorkFlowTaskManager.FindByTaskCode(SaveInstitueWorkCode);
            int TaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
            TaskDoerManager.FindByTaskId(TaskId);

            if (TaskDoerManager.Count > 0)
            {
                int NcId = int.Parse(TaskDoerManager[0]["NcId"].ToString());
                NezamMemberChartManager.FindByNcId(NcId);

                int EmpId = int.Parse(NezamMemberChartManager[0]["EmpId"].ToString());

                LoginManager.FindByMeIdUltId(EmpId, 4);
                if (LoginManager.Count > 0)
                {
                    int userId = int.Parse(LoginManager[0]["UserId"].ToString());
                    int CurrentUserId = (int)(Session["Login"]);
                    //  string PageMode = Utility.DecryptQS(HiddenFieldTeacher["PageMode"].ToString());
                    if (CurrentUserId == userId)
                    {
                        Response.Redirect("AddInstitues.aspx?InsId=" + Utility.EncryptQS(InsId.ToString()) + "&PageMode=" + Utility.EncryptQS("Edit"));
                    }
                    else
                    {
                        this.DivReport.Visible = true;
                        this.LabelWarning.Text = "امکان ویرایش اطلاعات در این مرحله از گردش کار وجود ندارد";
                    }
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "امکان ویرایش اطلاعات در این مرحله از گردش کار وجود ندارد";
                }
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "امکان ویرایش اطلاعات در این مرحله از گردش کار وجود ندارد";
            }
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "امکان ویرایش اطلاعات در این مرحله از گردش کار وجود ندارد";
        }
    }
    #endregion
}
