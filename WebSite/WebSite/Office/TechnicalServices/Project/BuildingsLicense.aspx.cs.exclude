using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using DevExpress.Web;

public partial class Employee_TechnicalServices_Project_BuildingsLicense : System.Web.UI.Page
{
    string ProjectId;
    string PrjReId;
    string PageMode;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            if (string.IsNullOrEmpty(Request.QueryString["ProjectId"]))
                Response.Redirect("Project.aspx");

            SetKey();
            SetProjectMainMenuEnabled();

        }

        this.DivReport.Visible = false;
        this.DivReport.Attributes.Add("onclick", "ChangeVisible(this)");
        this.DivReport.Attributes.Add("onmouseover", "ChangeIcon(this)");

        Session["DataTable"] = CustomAspxDevGridViewLicense.Columns;
        Session["DataSource"] = ObjectDataSourceLicenseRevival;
        Session["Title"] = "پروانه ساخت";
        Session["Header"] = GetRepHeader();
    }

    protected void btnView_Click(object sender, EventArgs e)
    {
        NextPage("View");
    }    

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        Print();
    }

    protected void btnBack_Click(object sender, EventArgs e)
    {
        if (Utility.DecryptQS(PkProjectId.Value) == "-1")
            Response.Redirect("Project.aspx");

        string Qs = "ProjectId=" + PkProjectId.Value + "&PrjReId=" + PkPrjReId.Value + "&PageMode=" + Utility.EncryptQS("View");
        Response.Redirect("ProjectInsert.aspx?" + Qs);
    }

    private void NextPage(string Mode)
    {
        int BuildingsLicenseId = -1;
        ProjectId = Utility.DecryptQS(PkProjectId.Value);
       
        TSP.DataManager.TechnicalServices.BuildingsLicenseManager BuildingsLicenseManager = new TSP.DataManager.TechnicalServices.BuildingsLicenseManager();
        BuildingsLicenseManager.FindByProjectId(Convert.ToInt32(ProjectId));
        if (BuildingsLicenseManager.Count == 1)
        {
            BuildingsLicenseId = Convert.ToInt32(BuildingsLicenseManager[0]["BuildingsLicenseId"]);
        }

        int LicenseRevivalId = -1;
        if (CustomAspxDevGridViewLicense.FocusedRowIndex > -1 && Mode != "New")
        {
            DataRow row = CustomAspxDevGridViewLicense.GetDataRow(CustomAspxDevGridViewLicense.FocusedRowIndex);
            LicenseRevivalId = (int)row["LicenseRevivalId"];
        }

        if (LicenseRevivalId == -1 && Mode != "New")
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "لطفاً برای مشاهده اطلاعات ابتدا یک رکورد را انتخاب نمائید";
        }
        else
        {
            Response.Redirect("BuildingsLicenseInsert.aspx?LicenseRevivalId=" + Utility.EncryptQS(LicenseRevivalId.ToString()) + "&BuildingsLicenseId=" + Utility.EncryptQS(BuildingsLicenseId.ToString()) + "&PageMode=" + Utility.EncryptQS(Mode) + "&ProjectId=" + Server.HtmlDecode(Request.QueryString["ProjectId"]) + "&PrjReId=" + Server.HtmlDecode(Request.QueryString["PrjReId"]) + "&MainPageMode=" + PgMode.Value);
        }
    }

    private void Print()
    {
        //string FilterExp;
        //FilterExp = CustomAspxDevGridView1.FilterExpression;

        //Response.Redirect("~/ReportForms/Accounting/BuildingsLicenseReport.aspx?FilterExp=" + Utility.EncryptQS(FilterExp));
    }
        
    private string GetRepHeader()
    {
        string LicenseNo = GetLicenseNo();
        return "شماره پروانه : " + LicenseNo;
    }

    private string GetLicenseNo()
    {
        ProjectId = Utility.DecryptQS(PkProjectId.Value);
        TSP.DataManager.TechnicalServices.BuildingsLicenseManager BuildingsLicenseManager = new TSP.DataManager.TechnicalServices.BuildingsLicenseManager();
        BuildingsLicenseManager.FindByProjectId(Convert.ToInt32(ProjectId));
        if (BuildingsLicenseManager.Count > 0)
            return BuildingsLicenseManager[0]["LicenseNo"].ToString();
        else
            return "";
    }

    private void SetKey()
    {
        ProjectId = "-1";
        PrjReId = "-1";

        try
        {
            PgMode.Value = Server.HtmlDecode(Request.QueryString["PageMode"].ToString());
            if (!(string.IsNullOrEmpty(Request.QueryString["ProjectId"])))
                PkProjectId.Value = Server.HtmlDecode(Request.QueryString["ProjectId"]).ToString();
            else
            {
                //PkProjectId.Value = Utility.EncryptQS("-1");
                MainMenu.Visible = false;
                Response.Redirect("Project.aspx");
            }

            if (!(string.IsNullOrEmpty(Request.QueryString["PrjReId"])))
                PkPrjReId.Value = Server.HtmlDecode(Request.QueryString["PrjReId"]).ToString();
            else
                PkPrjReId.Value = Utility.EncryptQS("-1");
        }
        catch
        {
            this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());
            return;
        }

        PrjReId = Utility.DecryptQS(PkPrjReId.Value);
        ProjectId = Utility.DecryptQS(PkProjectId.Value);
        ObjectDataSourceBuildingsLicense.SelectParameters["ProjectId"].DefaultValue = ProjectId;
        SetValues();        
    }

    private int GetBuildingsLicenseId()
    {
        ProjectId = Utility.DecryptQS(PkProjectId.Value);
        TSP.DataManager.TechnicalServices.BuildingsLicenseManager BuildingsLicenseManager = new TSP.DataManager.TechnicalServices.BuildingsLicenseManager();
        BuildingsLicenseManager.FindByProjectId(Convert.ToInt32(ProjectId));
        if (BuildingsLicenseManager.Count > 0)
            return Convert.ToInt32(BuildingsLicenseManager[0]["BuildingsLicenseId"]);
        else
            return -1;
    }

    private void SetValues()
    {
        ASPxLabelValid.Visible = false;
        ASPxImageValid.Visible = false;
        ASPxLabelInValid.Visible = false;
        ASPxImageInValid.Visible = false;
        ASPxLabelExpired.Visible = false;
        ASPxImageExpired.Visible = false;

        ProjectId = Utility.DecryptQS(PkProjectId.Value);
        TSP.DataManager.TechnicalServices.BuildingsLicenseManager BuildingsLicenseManager = new TSP.DataManager.TechnicalServices.BuildingsLicenseManager();
        BuildingsLicenseManager.FindByProjectId(Convert.ToInt32(ProjectId));
        if (BuildingsLicenseManager.Count > 0)
        {
            int BuildingsLicenseId = Convert.ToInt32(BuildingsLicenseManager[0]["BuildingsLicenseId"]);

            ObjectDataSourceLicenseRevival.SelectParameters[0].DefaultValue = BuildingsLicenseId.ToString();

            ASPxTextBoxLicenseNo.Text = (BuildingsLicenseManager[0]["LicenseNo"]).ToString();
            ASPxTextBoxLicenseType.Text = (BuildingsLicenseManager[0]["LicenseType"]).ToString();
            ASPxTextBoxFileNo.Text = (BuildingsLicenseManager[0]["FileNo"]).ToString();
            ASPxComboBoxSubmissionType.Value = (BuildingsLicenseManager[0]["SubmissionTypeId"]).ToString();
            SubmissionDate.Text = (BuildingsLicenseManager[0]["SubmissionDate"]).ToString();
            ExpireDate.Text = (BuildingsLicenseManager[0]["ExpireDate"]).ToString();

            int Days = Utility.Date.TotalDaysBetween2PersianDates(Utility.GetDateOfToday(), ExpireDate.Text);
            if (Days > 0)
            {
                if (Convert.ToBoolean(BuildingsLicenseManager[0]["Isvalidate"]))
                {
                    ASPxLabelValid.Visible = true;
                    ASPxImageValid.Visible = true;
                }
                else
                {
                    ASPxLabelInValid.Visible = true;
                    ASPxImageInValid.Visible = true;
                }
            }
            else
            {
                ASPxLabelExpired.Visible = true;
                ASPxImageExpired.Visible = true;
            }
        }
    }

    /*************************************************************************************************************/
    private void SetError(Exception err)
    {
        if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
        {
            System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;

            if (se.Number == 2601)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "اطلاعات تکراری می باشد";
            }
            else if (se.Number == 2627)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "کد تکراری می باشد";
            }
            else if (se.Number == 547)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "به علت وجود اطلاعات وابسته امکان حذف نمی باشد.";
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
        }
    }

    /***************************************************** ProjectMainMenu *************************************************************/
    protected void MainMenu_ItemClick(object source, DevExpress.Web.MenuItemEventArgs e)
    {
        ProjectId = Utility.DecryptQS(PkProjectId.Value);
        PrjReId = PkPrjReId.Value;
        PageMode = PgMode.Value;

        PrjMainMenu MainMenu = new PrjMainMenu("BuildingsLicense", Convert.ToInt32(ProjectId));
        Response.Redirect(MainMenu.GetRedirectLink(e.Item.Name, PrjReId, PageMode));
    }

    private void SetProjectMainMenuEnabled()
    {
        ProjectId = Utility.DecryptQS(PkProjectId.Value);
        if (ProjectId == "-1")
            ProjectId = "-2";

        PrjMainMenu PrjMainMenu = new PrjMainMenu("BuildingsLicense", Convert.ToInt32(ProjectId));
        MainMenu.Items.FindByName("BuildingsLicense").Selected = true;
        MainMenu.Items.FindByName("BuildingsLicense").Enabled = PrjMainMenu.GetEnabled("BuildingsLicense");
        MainMenu.Items.FindByName("Timing").Enabled = PrjMainMenu.GetEnabled("Timing");
        MainMenu.Items.FindByName("Contract").Enabled = PrjMainMenu.GetEnabled("Contract");
        MainMenu.Items.FindByName("Implementer").Enabled = PrjMainMenu.GetEnabled("Implementer");
        MainMenu.Items.FindByName("Observers").Enabled = PrjMainMenu.GetEnabled("Observers");
        MainMenu.Items.FindByName("Plans").Enabled = PrjMainMenu.GetEnabled("Plans");
        MainMenu.Items.FindByName("Owner").Enabled = PrjMainMenu.GetEnabled("Owner");
        MainMenu.Items.FindByName("Project").Enabled = PrjMainMenu.GetEnabled("Project");
        MainMenu.Items.FindByName("Accounting").Enabled = PrjMainMenu.GetEnabled("Accounting");
        MainMenu.Items.FindByName("Designer").Enabled = PrjMainMenu.GetEnabled("Designer");
    }

    /*************************************************************************************************************/
    protected void CustomAspxDevGridViewLicense_HtmlRowPrepared(object sender, DevExpress.Web.ASPxGridViewTableRowEventArgs e)
    {
        //if (e.RowType != GridViewRowType.Data)
        //    return;
        //if (PkPrjReId.Value != null)
        //{
        //    string PrjReId = Utility.DecryptQS(PkPrjReId.Value);
        //    if (e.GetValue("PrjReId") == null)
        //        return;
        //    string CurretnPrjReId = e.GetValue("PrjReId").ToString();
        //    if (PrjReId == CurretnPrjReId)
        //    {
        //        e.Row.BackColor = System.Drawing.Color.LightGray;
        //    }
        //}
    }

    protected void CustomAspxDevGridViewLicense_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
    {
        switch (e.DataColumn.FieldName)
        {
            case "SubmissionDate":
                e.Cell.Style["direction"] = "ltr";
                break;

            case "ExpireDate":
                e.Cell.Style["direction"] = "ltr";
                break;
        }
    }

    protected void CustomAspxDevGridView1_BeforePerformDataSelect(object sender, EventArgs e)
    {
        Session["BuildingsLicenseId"] = (sender as ASPxGridView).GetMasterRowKeyValue();
    }

    protected void CustomAspxDevGridView1_HtmlRowPrepared(object sender, DevExpress.Web.ASPxGridViewTableRowEventArgs e)
    {
        //if (e.RowType != GridViewRowType.Data)
        //    return;
        //if (PkPrjReId.Value != null)
        //{
        //    string PrjReId = Utility.DecryptQS(PkPrjReId.Value);
        //    if (e.GetValue("PrjReId") == null)
        //        return;
        //    string CurretnPrjReId = e.GetValue("PrjReId").ToString();
        //    if (PrjReId == CurretnPrjReId)
        //    {
        //        e.Row.BackColor = System.Drawing.Color.LightGray;
        //    }
        //}
    }

    protected void CustomAspxDevGridView1_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
    {
        switch (e.DataColumn.FieldName)
        {
            case "FromDate":
                e.Cell.Style["direction"] = "ltr";
                break;

            case "ExpireDate":
                e.Cell.Style["direction"] = "ltr";
                break;
        }
    }

    protected void CustomAspxDevGridView1_AutoFilterCellEditorInitialize(object sender, ASPxGridViewEditorEventArgs e)
    {
        switch (e.Column.FieldName)
        {
            case "FromDate":
                e.Editor.Style["direction"] = "ltr";
                break;

            case "ExpireDate":
                e.Editor.Style["direction"] = "ltr";
                break;
        }
    }

    protected void CustomAspxDevGridViewLicense_AutoFilterCellEditorInitialize(object sender, ASPxGridViewEditorEventArgs e)
    {
        switch (e.Column.FieldName)
        {
            case "SubmissionDate":
                e.Editor.Style["direction"] = "ltr";
                break;

            case "ExpireDate":
                e.Editor.Style["direction"] = "ltr";
                break;
        }
    }
}