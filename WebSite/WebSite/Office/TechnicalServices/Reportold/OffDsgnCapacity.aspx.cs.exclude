using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using DevExpress.Web;

public partial class Employee_TechnicalServices_Report_OffDsgnCapacity : System.Web.UI.Page
{
    string OfficeId, Year;

    protected void Page_Load(object sender, EventArgs e)
    {
        this.DivReport.Attributes.Add("onclick", "ChangeVisible(this)");
        this.DivReport.Attributes.Add("onmouseover", "ChangeIcon(this)");
        this.DivReport.Visible = false;

        if (!IsPostBack)
        {
            SetKeys();
        }
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        Print();
    }

    /*******************************************************************************************************************************************/
    private void Print()
    {
        OfficeId = ASPxTextBoxOfId.Text;
        Year = ASPxComboBoxYear.Text;

        string Qs = "OfficeId=" + Utility.EncryptQS(OfficeId) + "&Year=" + Utility.EncryptQS(Year);
        Response.Redirect("~/ReportForms/TechnicalServices/OffDsgnCapacity.aspx?" + Qs);
    }

    /*******************************************************************************************************************************************/
    private void SetKeys()
    {
        ASPxTextBoxOfId.Text = (Utility.GetCurrentUser_MeId()).ToString();
        ASPxComboBoxYear.Value = Utility.GetYearOfToday();

        Search();
    }

    private void Search()
    {
        Capacity Cpcty = new Capacity();

        if (!SetOfficeInfo())
        {
            Clear();
            return;
        }

        SetDesigneCapacity(Cpcty);
        SetStages(Cpcty);
        SetComponents();
    }

    private bool SetOfficeInfo()
    {
        OfficeId = ASPxTextBoxOfId.Text;
        TSP.DataManager.OfficeManager OfficeManager = new TSP.DataManager.OfficeManager();
        OfficeManager.FindByCode(Convert.ToInt32(OfficeId));
        if (OfficeManager.Count > 0)
        {
            ASPxTextBoxOfName.Text = OfficeManager[0]["OfName"].ToString();
            ASPxTextBoxMName.Text = OfficeManager[0]["MName"].ToString();
            ASPxTextBoxRegOfNo.Text = OfficeManager[0]["RegOfNo"].ToString();
            return true;
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "کد عضویت معتبر نمی باشد";
            return false;
        }
    }

    private void SetDesigneCapacity(Capacity Cpcty)
    {
        DataTable CapacityInfoDT = new DataTable();

        OfficeId = ASPxTextBoxOfId.Text;
        Year = ASPxComboBoxYear.Text;

        //???????????????
        //if (Convert.ToInt32(OfficeId) > 0 && Year != "")
        //    CapacityInfoDT = Cpcty.GetYearInformation((int)TSP.DataManager.TSProjectIngridientType.Designer, (int)TSP.DataManager.TSMemberType.Office, Convert.ToInt32(OfficeId), Year);

        //CustomAspxDevGridViewDsgn.DataSource = CapacityInfoDT;
        //CustomAspxDevGridViewDsgn.DataBind();
        //???????????????
    }

    private void SetOfficeMembers(int FId)
    {
        OfficeId = ASPxTextBoxOfId.Text;
        Year = ASPxComboBoxYear.Text;

        if (Convert.ToInt32(OfficeId) > 0 && Year != "")
        {
            ObjectDataSourceMembers.SelectParameters["OfficeId"].DefaultValue = OfficeId;
            ObjectDataSourceMembers.SelectParameters["ProjectIngridientTypeId"].DefaultValue = ((int)TSP.DataManager.TSProjectIngridientType.Designer).ToString();
            ObjectDataSourceMembers.SelectParameters["DocOffIncreaseJobCapacityType"].DefaultValue = ((int)TSP.DataManager.DocOffIncreaseJobCapacityType.Office).ToString();
            ObjectDataSourceMembers.SelectParameters["FileId"].DefaultValue = FId.ToString();
            ObjectDataSourceMembers.SelectParameters["Year"].DefaultValue = Year;
        }
    }

    private void SetStages(Capacity Cpcty)
    {
        TSP.DataManager.TechnicalServices.CapacityAssignmentManager CapacityAssignmentManager = new TSP.DataManager.TechnicalServices.CapacityAssignmentManager();

        Year = ASPxComboBoxYear.Text;

        //???????????????
        //if (Year != "")
        //    CapacityAssignmentManager = Cpcty.GetYearsStages(Year);

        //CustomAspxDevGridViewCapacityAssignment.DataSource = CapacityAssignmentManager.DataTable;
        //CustomAspxDevGridViewCapacityAssignment.DataBind();
        //???????????????
    }

    private void SetCapacityAssignmentDesigneCapacity(int CapacityAssignmentId)
    {
        OfficeId = ASPxTextBoxOfId.Text;
        Year = ASPxComboBoxYear.Text;

        if (Convert.ToInt32(OfficeId) > 0 && Year != "")
        {
            TSP.DataManager.TechnicalServices.CapacityAssignmentManager CapacityAssignmentManager = new TSP.DataManager.TechnicalServices.CapacityAssignmentManager();
            CapacityAssignmentManager.FindByCapacityAssignmentId(CapacityAssignmentId);
            if (CapacityAssignmentManager.Count > 0)
            {
                ObjectDataSourceStageInfo.SelectParameters["ProjectIngridientTypeId"].DefaultValue = ((int)TSP.DataManager.TSProjectIngridientType.Designer).ToString();
                ObjectDataSourceStageInfo.SelectParameters["MemberTypeId"].DefaultValue = ((int)TSP.DataManager.TSMemberType.Office).ToString();
                ObjectDataSourceStageInfo.SelectParameters["MeOfficeEngOId"].DefaultValue = OfficeId;
                ObjectDataSourceStageInfo.SelectParameters["Year"].DefaultValue = Year;
                ObjectDataSourceStageInfo.SelectParameters["Stage"].DefaultValue = CapacityAssignmentManager[0]["Stage"].ToString();
            }
        }
    }

    private void SetOfficeCAMembers(int FId, int Stage)
    {
        OfficeId = ASPxTextBoxOfId.Text;
        Year = ASPxComboBoxYear.Text;

        if (Convert.ToInt32(OfficeId) > 0 && Year != "")
        {
            ObjectDataSourceCAMembers.SelectParameters["OfficeId"].DefaultValue = OfficeId;
            ObjectDataSourceCAMembers.SelectParameters["ProjectIngridientTypeId"].DefaultValue = ((int)TSP.DataManager.TSProjectIngridientType.Designer).ToString();
            ObjectDataSourceCAMembers.SelectParameters["DocOffIncreaseJobCapacityType"].DefaultValue = ((int)TSP.DataManager.DocOffIncreaseJobCapacityType.Office).ToString();
            ObjectDataSourceCAMembers.SelectParameters["FileId"].DefaultValue = FId.ToString();
            ObjectDataSourceCAMembers.SelectParameters["Year"].DefaultValue = Year;
            ObjectDataSourceCAMembers.SelectParameters["Stage"].DefaultValue = Stage.ToString();
        }
    }

    private void Clear()
    {
        ASPxTextBoxOfName.Text = "";
        ASPxTextBoxMName.Text = "";
        ASPxTextBoxRegOfNo.Text = "";

        CustomAspxDevGridViewDsgn.DataSource = null;
        CustomAspxDevGridViewDsgn.DataBind();

        CustomAspxDevGridViewCapacityAssignment.DataSource = null;
        CustomAspxDevGridViewCapacityAssignment.DataBind();
    }

    private string GetGrdName(int GrdId)
    {
        TSP.DataManager.GradeManager GradeManager = new TSP.DataManager.GradeManager();
        GradeManager.FindByCode(GrdId);
        if (GradeManager.Count > 0)
            return GradeManager[0]["GrdName"].ToString();
        else
            return "";
    }

    private void SetComponents()
    {
        TSP.DataManager.TechnicalServices.CapacityAssignmentManager CapacityAssignmentManager = new TSP.DataManager.TechnicalServices.CapacityAssignmentManager();
        CapacityAssignmentManager.FindLastStageInYear("");

        if (ASPxComboBoxYear.Value.ToString() == Utility.GetYearOfToday() || CapacityAssignmentManager.Count == 0 || ASPxComboBoxYear.Value.ToString() == CapacityAssignmentManager[0]["Year"].ToString())
        {
            CustomAspxDevGridViewDsgn.Columns["RemainCapacity"].Caption = "ظرفیت باقیمانده";

            //for (int i = 0; i < CustomAspxDevGridViewCapacityAssignment.VisibleRowCount; i++)
            //{
            //    TSP.WebControls.CustomAspxDevGridView GridCAObs = (TSP.WebControls.CustomAspxDevGridView)CustomAspxDevGridViewCapacityAssignment.FindDetailRowTemplateControl(i, "CustomAspxDevGridViewCADsgn");
            //    if (GridCAObs != null)
            //        GridCAObs.Columns["RemainCapacity"].Caption = "ظرفیت باقیمانده";
            //}

        }
        else
        {
            CustomAspxDevGridViewDsgn.Columns["RemainCapacity"].Caption = "ظرفیت سوخت شده";

            //for (int i = 0; i < CustomAspxDevGridViewCapacityAssignment.VisibleRowCount; i++)
            //{
            //    TSP.WebControls.CustomAspxDevGridView GridCAObs = (TSP.WebControls.CustomAspxDevGridView)CustomAspxDevGridViewCapacityAssignment.FindDetailRowTemplateControl(i, "CustomAspxDevGridViewCADsgn");
            //    if (GridCAObs != null)
            //        GridCAObs.Columns["RemainCapacity"].Caption = "ظرفیت سوخت شده";
            //}
        }
    }

    private void SetComponents(ASPxGridViewTableDataCellEventArgs e)
    {
        TSP.DataManager.TechnicalServices.CapacityAssignmentManager CapacityAssignmentManager = new TSP.DataManager.TechnicalServices.CapacityAssignmentManager();
        CapacityAssignmentManager.FindLastStageInYear("");

        if (ASPxComboBoxYear.Value.ToString() == Utility.GetYearOfToday() || CapacityAssignmentManager.Count == 0 || ASPxComboBoxYear.Value.ToString() == CapacityAssignmentManager[0]["Year"].ToString())
        {
            if (e.DataColumn.FieldName == "RemainCapacity")
                e.DataColumn.Caption = "ظرفیت باقیمانده";
        }
        else
        {
            if (e.DataColumn.FieldName == "RemainCapacity")
                e.DataColumn.Caption = "ظرفیت سوخت شده";
        }
    }
        
    /*********************************************************************************************************************************/
    protected void CustomAspxDevGridViewDsgn_FocusedRowChanged(object sender, EventArgs e)
    {
        if (CustomAspxDevGridViewDsgn.FocusedRowIndex != -1 && CustomAspxDevGridViewDsgn.SettingsDetail.ShowDetailRow)
            CustomAspxDevGridViewDsgn.DetailRows.ExpandRow(CustomAspxDevGridViewDsgn.FocusedRowIndex);
    }
    protected void CustomAspxDevGridViewDsgn_DetailRowExpandedChanged(object sender, ASPxGridViewDetailRowEventArgs e)
    {
        CustomAspxDevGridViewDsgn.FocusedRowIndex = e.VisibleIndex;
    }

    protected void CustomAspxDevGridViewMembers_BeforePerformDataSelect(object sender, EventArgs e)
    {
        int FId = Convert.ToInt32((sender as ASPxGridView).GetMasterRowKeyValue());
        SetOfficeMembers(FId);
    }

    protected void CustomAspxDevGridViewCapacityAssignment_FocusedRowChanged(object sender, EventArgs e)
    {
        if (CustomAspxDevGridViewCapacityAssignment.FocusedRowIndex != -1 && CustomAspxDevGridViewCapacityAssignment.SettingsDetail.ShowDetailRow)
            CustomAspxDevGridViewCapacityAssignment.DetailRows.ExpandRow(CustomAspxDevGridViewCapacityAssignment.FocusedRowIndex);
    }
    protected void CustomAspxDevGridViewCapacityAssignment_DetailRowExpandedChanged(object sender, DevExpress.Web.ASPxGridViewDetailRowEventArgs e)
    {
        CustomAspxDevGridViewCapacityAssignment.FocusedRowIndex = e.VisibleIndex;
    }

    protected void CustomAspxDevGridViewCADsgn_BeforePerformDataSelect(object sender, EventArgs e)
    {
        int CapacityAssignmentId = Convert.ToInt32((sender as ASPxGridView).GetMasterRowKeyValue());
        SetCapacityAssignmentDesigneCapacity(CapacityAssignmentId);

        HFStage.Value = Convert.ToInt32((sender as ASPxGridView).GetMasterRowFieldValues("Stage")).ToString();
    }

    protected void CustomAspxDevGridViewCADsgn_FocusedRowChanged(object sender, EventArgs e)
    {
        if ((sender as ASPxGridView).FocusedRowIndex != -1 && (sender as ASPxGridView).SettingsDetail.ShowDetailRow)
            (sender as ASPxGridView).DetailRows.ExpandRow((sender as ASPxGridView).FocusedRowIndex);

    }
    protected void CustomAspxDevGridViewCADsgn_DetailRowExpandedChanged(object sender, DevExpress.Web.ASPxGridViewDetailRowEventArgs e)
    {
        (sender as ASPxGridView).FocusedRowIndex = e.VisibleIndex;
    }

    protected void CustomAspxDevGridViewCAMembers_BeforePerformDataSelect(object sender, EventArgs e)
    {
        int FId = Convert.ToInt32((sender as ASPxGridView).GetMasterRowKeyValue());

        if (HFStage.Value != "")
            SetOfficeCAMembers(FId, Convert.ToInt32(HFStage.Value));
    }

    protected void CustomAspxDevGridViewDsgn_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
    {
        if (e.DataColumn.FieldName == "FNO")
            e.Cell.Style["direction"] = "ltr";

        if (e.DataColumn.FieldName == "ConfirmDate")
            e.Cell.Style["direction"] = "ltr";

        if (e.DataColumn.FieldName == "ExpireDate")
            e.Cell.Style["direction"] = "ltr";
    }

    protected void CustomAspxDevGridViewDsgn_AutoFilterCellEditorInitialize(object sender, ASPxGridViewEditorEventArgs e)
    {
        if (e.Column.FieldName == "FNO")
            e.Editor.Style["direction"] = "ltr";

        if (e.Column.FieldName == "ConfirmDate")
            e.Editor.Style["direction"] = "ltr";

        if (e.Column.FieldName == "ExpireDate")
            e.Editor.Style["direction"] = "ltr";
    }

    protected void CustomAspxDevGridViewCapacityAssignment_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
    {
        if (e.DataColumn.FieldName == "AssignmentDate")
            e.Cell.Style["direction"] = "ltr";
    }

    protected void CustomAspxDevGridViewCapacityAssignment_AutoFilterCellEditorInitialize(object sender, ASPxGridViewEditorEventArgs e)
    {
        if (e.Column.FieldName == "AssignmentDate")
            e.Editor.Style["direction"] = "ltr";
    }

    protected void CustomAspxDevGridViewCADsgn_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
    {
        if (e.DataColumn.FieldName == "FNO")
            e.Cell.Style["direction"] = "ltr";

        if (e.DataColumn.FieldName == "ConfirmDate")
            e.Cell.Style["direction"] = "ltr";

        if (e.DataColumn.FieldName == "ExpireDate")
            e.Cell.Style["direction"] = "ltr";

        SetComponents(e);
    }

    protected void CustomAspxDevGridViewCADsgn_AutoFilterCellEditorInitialize(object sender, ASPxGridViewEditorEventArgs e)
    {
        if (e.Column.FieldName == "FNO")
            e.Editor.Style["direction"] = "ltr";

        if (e.Column.FieldName == "ConfirmDate")
            e.Editor.Style["direction"] = "ltr";

        if (e.Column.FieldName == "ExpireDate")
            e.Editor.Style["direction"] = "ltr";
    }

    protected void ASPxComboBoxYear_SelectedIndexChanged(object sender, EventArgs e)
    {
        Search();
    }
}