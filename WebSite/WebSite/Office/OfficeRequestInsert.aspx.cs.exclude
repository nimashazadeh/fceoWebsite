using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using DevExpress.Web.ASPxUploadControl;

public partial class Office_OfficeRequestInsert : System.Web.UI.Page
{
    DataTable dtOfImg = null;
    private bool IsPageRefresh = false;

    protected void Page_Load(object sender, EventArgs e)
    {
        this.DivReport.Visible = false;
        this.DivReport.Attributes.Add("onclick", "ChangeVisible(this)");
        this.DivReport.Attributes.Add("onmouseover", "ChangeIcon(this)");

        if (!IsPostBack)
        {
            ViewState["postids"] = System.Guid.NewGuid().ToString();
            Session["postid"] = ViewState["postids"].ToString();
        }
        else
        {
            if (!IsCallback && Session["postid"] != null)
            {
                if (ViewState["postids"].ToString() != Session["postid"].ToString()) { IsPageRefresh = true; }
                Session["postid"] = System.Guid.NewGuid().ToString(); ViewState["postids"] = Session["postid"];
            }
        }

        if (!IsPostBack)
        {
            ViewState["Sign"] = "";
            ViewState["Arm"] = "";
            Session["TblOfImgOfRe"] = null;
            Session["OfReqAtt"] = null;
            Session["FileOfArm2"] = null;
            Session["FileOfSign2"] = null;

            if (string.IsNullOrEmpty(Request.QueryString["OfId"]))
            {
                Response.Redirect("OfficeHome.aspx");
            }


            if (Session["TblOfImgOfRe"] == null)
            {
                dtOfImg = new DataTable();
                dtOfImg.Columns.Add("ImgUrl");
                dtOfImg.Columns.Add("TempImgUrl");
                dtOfImg.Columns.Add("fileName");
                dtOfImg.Columns.Add("Mode");
                dtOfImg.Columns.Add("Code");
                dtOfImg.Columns.Add("Description");
                dtOfImg.Columns.Add("Id");
                dtOfImg.Columns["Id"].AutoIncrement = true;
                dtOfImg.Columns["Id"].AutoIncrementSeed = 1;

                Session["TblOfImgOfRe"] = dtOfImg;
            }
            else
                dtOfImg = (DataTable)Session["TblOfImgOfRe"];

            AspxGridFlp.DataSource = dtOfImg;
            AspxGridFlp.DataBind();



            OfficeId.Value = Server.HtmlDecode(Request.QueryString["OfId"].ToString());
            PgMode.Value = Server.HtmlDecode(Request.QueryString["PageMode"].ToString());
            OfficeRequest.Value = Server.HtmlDecode(Request.QueryString["OfReId"].ToString());

            string OfId = Utility.DecryptQS(OfficeId.Value);
            string PageMode = Utility.DecryptQS(PgMode.Value);
            string OfReId = Utility.DecryptQS(OfficeRequest.Value);

            if (string.IsNullOrEmpty(OfId)  || string.IsNullOrEmpty(PageMode))
            {
                this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());
                return;
            }
         

            switch (PageMode)
            { 
                case"New":
                    ASPxMenu1.Enabled = false;
                    FillFormOffice(int.Parse(OfId));
                    ASPxRoundPanel2.HeaderText = "درخواست صدور پروانه";
                    break;

                case"View":
                    Disable();
                    btnSave.Enabled = false;
                    btnSave2.Enabled = false;
                    FillForm(int.Parse(OfReId));
                    ASPxRoundPanel2.HeaderText = "مشاهده";

                    break;

                case "Edit":
                    FillForm(int.Parse(OfReId));
                    ASPxRoundPanel2.HeaderText = "ویرایش";

                    break;
                case "Change":
                    ASPxMenu1.Enabled = false;
                    FillFormOffice(int.Parse(OfId));
                    ASPxRoundPanel2.HeaderText = "درخواست تغییرات پروانه";

                    break;
                    
                case "Revival":
                    ASPxMenu1.Enabled = false;
                    FillFormOffice(int.Parse(OfId));
                    ASPxRoundPanel2.HeaderText = "درخواست تمدید پروانه";

                    break;

                case "Reduplicate":
                    ASPxMenu1.Enabled = false;
                    FillFormOffice(int.Parse(OfId));
                    ComboMFType.Enabled = false;
                    ASPxRoundPanel2.HeaderText = "درخواست صدور المثنی";

                    break;
            }
         

        }
    }

    protected void FillForm(int OfReId)
    {
        TSP.DataManager.OfficeRequestManager ReqManager = new TSP.DataManager.OfficeRequestManager();
        ReqManager.FindByCode(OfReId);
        if (ReqManager.Count > 0)
        {
            txtName.Text = ReqManager[0]["OfName"].ToString();
            txtNameEn.Text = ReqManager[0]["OfNameEn"].ToString();
            txtOfMobile.Text = ReqManager[0]["MobileNo"].ToString();
            txtOfAddress.Text = ReqManager[0]["Address"].ToString();
            txtOfWebsite.Text = ReqManager[0]["Website"].ToString();
            txtOfEmail.Text = ReqManager[0]["Email"].ToString();
            txtDesc.Text = ReqManager[0]["RequestDesc"].ToString();
            ComboMFType.DataBind();
            ComboMFType.SelectedIndex = ComboMFType.Items.IndexOfValue(ReqManager[0]["MFType"].ToString());

            string Tel1 = ReqManager[0]["Tel1"].ToString();
            if (ReqManager[0]["Tel1"].ToString() != "")
            {
                if (ReqManager[0]["Tel1"].ToString().IndexOf("-") > 0)
                {
                    txtOfTel1_pre.Text = ReqManager[0]["Tel1"].ToString().Substring(0, ReqManager[0]["Tel1"].ToString().IndexOf("-"));
                    txtOfTel1.Text = ReqManager[0]["Tel1"].ToString().Substring(ReqManager[0]["Tel1"].ToString().IndexOf("-") + 1, ReqManager[0]["Tel1"].ToString().Length - ReqManager[0]["Tel1"].ToString().IndexOf("-") - 1);
                }
                else
                {
                    txtOfTel1.Text = ReqManager[0]["Tel1"].ToString();
                }
            }

            string Tel2 = ReqManager[0]["Tel2"].ToString();
            if (ReqManager[0]["Tel2"].ToString() != "")
            {
                if (ReqManager[0]["Tel2"].ToString().IndexOf("-") > 0)
                {
                    txtOfTel2_pre.Text = ReqManager[0]["Tel2"].ToString().Substring(0, ReqManager[0]["Tel2"].ToString().IndexOf("-"));
                    txtOfTel2.Text = ReqManager[0]["Tel2"].ToString().Substring(ReqManager[0]["Tel2"].ToString().IndexOf("-") + 1, ReqManager[0]["Tel2"].ToString().Length - ReqManager[0]["Tel2"].ToString().IndexOf("-") - 1);
                }
                else
                {
                    txtOfTel2.Text = ReqManager[0]["Tel2"].ToString();
                }
            }

            string Fax = ReqManager[0]["Fax"].ToString();
            if (ReqManager[0]["Fax"].ToString() != "")
            {
                if (ReqManager[0]["Fax"].ToString().IndexOf("-") > 0)
                {
                    txtOfFax_pre.Text = ReqManager[0]["Fax"].ToString().Substring(0, ReqManager[0]["Fax"].ToString().IndexOf("-"));
                    txtOfFax.Text = ReqManager[0]["Fax"].ToString().Substring(ReqManager[0]["Fax"].ToString().IndexOf("-") + 1, ReqManager[0]["Fax"].ToString().Length - ReqManager[0]["Fax"].ToString().IndexOf("-") - 1);
                }
                else
                {
                    txtOfFax.Text = ReqManager[0]["Fax"].ToString();
                }
            }

            imgOfArm.ClientVisible = true;
            imgOfSign.ClientVisible = true;

            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["SignUrl"]))
            {
                imgOfSign.ImageUrl = ReqManager[0]["SignUrl"].ToString();
            }
            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["ArmUrl"]))
            {
                imgOfArm.ImageUrl = ReqManager[0]["ArmUrl"].ToString();
            }

            TSP.DataManager.AttachmentsManager attachManager = new TSP.DataManager.AttachmentsManager();
            attachManager.FindByTablePrimaryKey((int)TSP.DataManager.TableCodes.OfficeRequest, OfReId);
            dtOfImg = (DataTable)Session["TblOfImgOfRe"];
            for (int i = 0; i < attachManager.Count; i++)
            {
                DataRow dr = dtOfImg.NewRow();
                dr[0] = attachManager[i]["FilePath"].ToString();
                dr[1] = attachManager[i]["FilePath"].ToString();
                dr[5] = attachManager[i]["Description"].ToString();

                string fileName = Path.GetFileName(attachManager[0]["FilePath"].ToString());
                dr[2] = fileName;
                dr[3] = 1;
                dr[4] = attachManager[i][0];
                dtOfImg.Rows.Add(dr);

            }
            dtOfImg.AcceptChanges();
            AspxGridFlp.DataSource = dtOfImg;
            AspxGridFlp.DataBind();
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "امکان مشاهده اطلاعات وجود ندارد ";
            return;

        }
    }
    protected void FillFormOffice(int OfId)
    {
     

        TSP.DataManager.OfficeManager OfManager = Session["OfficeManager"] as  TSP.DataManager.OfficeManager;
        if (OfManager == null)
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "خطایی در صفحه رخ داده است.صفحه را دوباره بارگذاری نمایید.";
            return;
        }
      //  OfManager.FindByCode(OfId);
        if (OfManager.Count > 0)
        {
            txtName.Text = OfManager[0]["OfName"].ToString();
            txtNameEn.Text = OfManager[0]["OfNameEn"].ToString();
            txtOfMobile.Text = OfManager[0]["MobileNo"].ToString();
            txtOfAddress.Text = OfManager[0]["Address"].ToString();
            txtOfWebsite.Text = OfManager[0]["Website"].ToString();
            txtOfEmail.Text = OfManager[0]["Email"].ToString();

            string Tel1 = OfManager[0]["Tel1"].ToString();
            if (OfManager[0]["Tel1"].ToString() != "")
            {
                if (OfManager[0]["Tel1"].ToString().IndexOf("-") > 0)
                {
                    txtOfTel1_pre.Text = OfManager[0]["Tel1"].ToString().Substring(0, OfManager[0]["Tel1"].ToString().IndexOf("-"));
                    txtOfTel1.Text = OfManager[0]["Tel1"].ToString().Substring(OfManager[0]["Tel1"].ToString().IndexOf("-") + 1, OfManager[0]["Tel1"].ToString().Length - OfManager[0]["Tel1"].ToString().IndexOf("-") - 1);
                }
                else
                {
                    txtOfTel1.Text = OfManager[0]["Tel1"].ToString();
                }
            }

            string Tel2 = OfManager[0]["Tel2"].ToString();
            if (OfManager[0]["Tel2"].ToString() != "")
            {
                if (OfManager[0]["Tel2"].ToString().IndexOf("-") > 0)
                {
                    txtOfTel2_pre.Text = OfManager[0]["Tel2"].ToString().Substring(0, OfManager[0]["Tel2"].ToString().IndexOf("-"));
                    txtOfTel2.Text = OfManager[0]["Tel2"].ToString().Substring(OfManager[0]["Tel2"].ToString().IndexOf("-") + 1, OfManager[0]["Tel2"].ToString().Length - OfManager[0]["Tel2"].ToString().IndexOf("-") - 1);
                }
                else
                {
                    txtOfTel2.Text = OfManager[0]["Tel2"].ToString();
                }
            }

            string Fax = OfManager[0]["Fax"].ToString();
            if (OfManager[0]["Fax"].ToString() != "")
            {
                if (OfManager[0]["Fax"].ToString().IndexOf("-") > 0)
                {
                    txtOfFax_pre.Text = OfManager[0]["Fax"].ToString().Substring(0, OfManager[0]["Fax"].ToString().IndexOf("-"));
                    txtOfFax.Text = OfManager[0]["Fax"].ToString().Substring(OfManager[0]["Fax"].ToString().IndexOf("-") + 1, OfManager[0]["Fax"].ToString().Length - OfManager[0]["Fax"].ToString().IndexOf("-") - 1);
                }
                else
                {
                    txtOfFax.Text = OfManager[0]["Fax"].ToString();
                }
            }

            imgOfArm.ClientVisible = true;
            imgOfSign.ClientVisible = true;

            if ((!string.IsNullOrEmpty(OfManager[0]["SignUrl"].ToString())))
            {
                imgOfSign.ImageUrl = OfManager[0]["SignUrl"].ToString();
                ViewState["Sign"] = OfManager[0]["SignUrl"].ToString();
            }
            if ((!string.IsNullOrEmpty(OfManager[0]["ArmUrl"].ToString())))
            {
                imgOfArm.ImageUrl = OfManager[0]["ArmUrl"].ToString();
                ViewState["Arm"] = OfManager[0]["ArmUrl"].ToString();
            }
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "امکان مشاهده اطلاعات وجود ندارد ";
            return;

        }

    }
    protected void btnBack_Click(object sender, EventArgs e)
    {
        Session["TblOfImgOfRe"] = null;
        Response.Redirect("OfficeRequest.aspx?OfId=" + OfficeId.Value);
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        if (IsPageRefresh)
            return;

        string OfId = Utility.DecryptQS(OfficeId.Value);
        string OfReId = Utility.DecryptQS(OfficeRequest.Value);
        if ((string.IsNullOrEmpty(OfId)) || (string.IsNullOrEmpty(OfReId)))
        {
            this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());
            return;
        }
        string PageMode = Utility.DecryptQS(PgMode.Value);
        if (!string.IsNullOrEmpty(PageMode))
        {
            switch (PageMode)
            {
                case "New":
                    InsertRequest(int.Parse(OfId));
                    break;
                case "Edit":
                    Edit(int.Parse(OfReId));
                    break;
                case"Change":
                    Change(int.Parse(OfId), int.Parse(OfReId));
                    break;
                case "Revival":
                    Revival(int.Parse(OfId), int.Parse(OfReId));
                    break;
                case "Reduplicate":
                    Reduplicate(int.Parse(OfId), int.Parse(OfReId));
                    break;
            }
        }
        else
        {
            this.Response.Redirect("OfficeRequest.aspx?OfId=" + OfficeId.Value);
            
        }
    }

    #region AddAttachment
    protected void flp_FileUploadComplete(object sender, DevExpress.Web.ASPxUploadControl.FileUploadCompleteEventArgs e)
    {
        try
        {
            e.CallbackData = SaveImageAttflp(e.UploadedFile);
        }
        catch (Exception ex)
        {
            e.IsValid = false;
            e.ErrorText = ex.Message;
        }
    }
    protected string SaveImageAttflp(UploadedFile uploadedFile)
    {
        string ret = "";
        if (uploadedFile.IsValid)
        {
            do
            {
                FileInfo ImageType = new FileInfo(uploadedFile.PostedFile.FileName);
                ret = Path.GetRandomFileName() + ImageType.Extension;
            } while (File.Exists(MapPath("~/Image/Office/OffRequest/") + ret) == true || File.Exists(MapPath("~/Image/Temp/") + ret) == true);
            string tempFileName = MapPath("~/Image/Temp/") + ret;
            uploadedFile.SaveAs(tempFileName, true);
            Session["OfReqAtt"] = tempFileName;

        }
        return ret;
    }
    protected void btnAddFlp_Click(object sender, EventArgs e)
    {

        if (Session["TblOfImgOfRe"] != null)
        {
            dtOfImg = (DataTable)Session["TblOfImgOfRe"];

            DataRow dr = dtOfImg.NewRow();

            try
            {
                if (Session["OfReqAtt"] != null)
                {

                    dr[0] = "~/Image/Members/MeRequest/" + Path.GetFileName(Session["OfReqAtt"].ToString());
                    dr[2] = Path.GetFileName(Session["OfReqAtt"].ToString());
                    dr[1] = "~/Image/temp/" + Path.GetFileName(Session["OfReqAtt"].ToString());
                    dr[5] = txtDescImg.Text;
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "فایل مورد نظر را انتخاب نمایید";
                    return;
                }


                dr[3] = 0;
                dtOfImg.Rows.Add(dr);
                AspxGridFlp.DataSource = dtOfImg;
                AspxGridFlp.DataBind();

                Session["OfReqAtt"] = null;

                txtDescImg.Text = "";
                imgEndUploadImg.ClientVisible = false;


            }
            catch
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در اضافه کردن رخ داده است";
            }

        }
    }
    protected void AspxGridFlp_RowDeleting(object sender, DevExpress.Web.Data.ASPxDataDeletingEventArgs e)
    {
        e.Cancel = true;

        AspxGridFlp.DataSource = (DataTable)Session["TblOfImgOfRe"];
        AspxGridFlp.DataBind();

        int Id = -1;
        if (AspxGridFlp.FocusedRowIndex > -1)
        {
            Id = AspxGridFlp.FocusedRowIndex;
        }
        if (Id == -1)
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "لطفاً برای حذف اطلاعات ابتدا یک ردیف را انتخاب نمائید";
            return;

        }
        else
        {

            dtOfImg = (DataTable)Session["TblOfImgOfRe"];
            dtOfImg.Rows.Find(e.Keys["Id"]).Delete();
            Session["TblOfImgOfRe"] = dtOfImg;
            AspxGridFlp.DataSource = (DataTable)Session["TblOfImgOfRe"];
            AspxGridFlp.DataBind();
            dtOfImg = (DataTable)Session["TblOfImgOfRe"];

        }

    }
    #endregion

    protected void Disable()
    {
        Table1.Visible = false;
        AspxGridFlp.Columns[2].Visible = false;
        flpOfArm.Visible = false;
        flpOfSign.Visible = false;
        ComboMFType.Enabled = false;
        txtDesc.Enabled = false;
        
        for (int i = 0; i < ASPxRoundPanel4.Controls.Count; i++)
        {
            if (ASPxRoundPanel4.Controls[i] is DevExpress.Web.ASPxEditors.ASPxTextBox)
            {
                DevExpress.Web.ASPxEditors.ASPxTextBox co = (DevExpress.Web.ASPxEditors.ASPxTextBox)ASPxRoundPanel4.Controls[i];
                co.Enabled = false;
            }
            if (ASPxRoundPanel4.Controls[i] is DevExpress.Web.ASPxEditors.ASPxMemo)
            {
                DevExpress.Web.ASPxEditors.ASPxMemo co = (DevExpress.Web.ASPxEditors.ASPxMemo)ASPxRoundPanel4.Controls[i];
                co.Enabled = false;
            }

        }
    }
    protected void InsertRequest(int OfId)
    {
        TSP.DataManager.AttachmentsManager attachManager = new TSP.DataManager.AttachmentsManager();
        TSP.DataManager.OfficeRequestManager ReqManager = new TSP.DataManager.OfficeRequestManager();
        TSP.DataManager.TransactionManager trans = new TSP.DataManager.TransactionManager();
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        TSP.DataManager.ProvinceManager ProvinceManager = new TSP.DataManager.ProvinceManager();

        trans.Add(ReqManager);
        trans.Add(attachManager);
        trans.Add(WorkFlowStateManager);

      
        DataRow dr = ReqManager.NewRow();

        try
        {
            int PrId = Utility.GetCurrentProvinceId();
            ProvinceManager.FindByCode(PrId);
            string PrCode = "";
            string MFCode = "";
            string MFMjCode = "0000000";

            if (ProvinceManager.Count > 0)
            {
                PrCode = ProvinceManager[0]["NezamCode"].ToString();
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در بازخوانی اطلاعات انجام گرفته است";
                return;
            }

            dr["OfId"] = OfId;
            dr["OfName"] = txtName.Text;
            dr["OfNameEn"] = txtNameEn.Text;
            dr["MobileNo"] = txtOfMobile.Text;
            dr["Address"] = txtOfAddress.Text;
            if (txtOfTel1_pre.Text != "" && txtOfTel1.Text != "")
                dr["Tel1"] = txtOfTel1_pre.Text + "-" + txtOfTel1.Text;
            else if (txtOfTel1.Text != "")
                dr["Tel1"] = txtOfTel1.Text;

            if (txtOfTel2_pre.Text != "" && txtOfTel2.Text != "")
                dr["Tel2"] = txtOfTel2_pre.Text + "-" + txtOfTel2.Text;
            else if (txtOfTel2.Text != "")
                dr["Tel2"] = txtOfTel2.Text;
            if (txtOfFax_pre.Text != "" && txtOfFax.Text != "")
                dr["Fax"] = txtOfFax_pre.Text + "-" + txtOfFax.Text;
            else if (txtOfFax.Text != "")
                dr["Fax"] = txtOfFax.Text;
            dr["Website"] = txtOfWebsite.Text;
            dr["Email"] = txtOfEmail.Text;
            dr["CreateDate"] = Utility.GetDateOfToday();
            dr["RequestDesc"] = txtDesc.Text;

            dr["UserId"] = Session["Login"];
            dr["ModifiedDate"] = DateTime.Now;

            if (Session["FileOfArm2"] != null)
            {
                imgOfArm.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfArm2"].ToString();
                dr["ArmUrl"] = "~/Image/Office/Arm/Request/" + Session["FileOfArm2"].ToString();
            }
            else
                dr["ArmUrl"] = ViewState["Arm"].ToString();

            if (Session["FileOfSign2"] != null)
            {
                imgOfSign.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfSign2"].ToString();
                dr["SignUrl"] = "~/Image/Office/Sign/Request/" + Session["FileOfSign2"].ToString();
            }
            else
                dr["SignUrl"] = ViewState["Sign"].ToString();

            dr["Type"] = 1;//درخواست صدور پروانه
            dr["RegPlaceId"] = Utility.GetCurrentProvinceId();//استان فارس
            dr["PrId"] = Utility.GetCurrentProvinceId();//استان فارس
           
            if (ComboMFType.Value != null)
            {
                dr["MFType"] = ComboMFType.Value;
                if (ComboMFType.Value.ToString() == "1")//طراح و ناظر
                    MFCode = "2";
                else if (ComboMFType.Value.ToString() == "2")//مجری
                    MFCode = "19";
            }
            else 
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "نوع پروانه را انتخاب نمایید";
                return;
            }
            dr["Requester"] = 0;
            dr["FollowCode"] = Utility.GenFollowCode(Utility.FollowType.OfficeRequest);

            ReqManager.AddRow(dr);
            trans.BeginSave();
            if (ReqManager.Save() == 1)
            {
                ReqManager.DataTable.AcceptChanges();

                OfficeRequest.Value = Utility.EncryptQS(ReqManager[0]["OfReId"].ToString());

                #region SetMFNo
                TSP.DataManager.OfficeMemberManager OffMemManager = new TSP.DataManager.OfficeMemberManager();
                TSP.DataManager.DocMemberFileMajorManager MeMjManager = new TSP.DataManager.DocMemberFileMajorManager();
                DataTable dtOfMe = OffMemManager.SelectOfficeMember(OfId, 1, -1);//return membe
                if (dtOfMe.Rows.Count > 0)
                {
                    for (int m = 0; m < dtOfMe.Rows.Count; m++)
                    {
                        DataTable dtMj = MeMjManager.SelectMemberMasterMajor(int.Parse(dtOfMe.Rows[m]["PersonId"].ToString()));
                        if (dtMj.Rows.Count > 0)
                        {
                            int MjId = int.Parse(dtMj.Rows[0]["MjId"].ToString());
                            //string MFSerialNo = ReqManager[0]["MFSerialNo"].ToString();
                            int i = -1;
                            char[] Code = MFMjCode.ToCharArray();

                            switch (MjId)
                            {
                                case (int)TSP.DataManager.MainMajors.Architecture:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Architecture;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                case (int)TSP.DataManager.MainMajors.Civil:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Civil;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                case (int)TSP.DataManager.MainMajors.Electronic:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Electronic;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                case (int)TSP.DataManager.MainMajors.Mapping:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Mapping;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                case (int)TSP.DataManager.MainMajors.Mechanic:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Mechanic;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                case (int)TSP.DataManager.MainMajors.Traffic:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Traffic;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                case (int)TSP.DataManager.MainMajors.Urbanism:
                                    i = (int)TSP.DataManager.DocumentOfficeMeMajor.Urbanism;
                                    Code[i] = MjId.ToString()[0];
                                    break;
                                default:
                                    i = -1;
                                    break;

                            }
                            if (i != -1)
                            {
                                MFMjCode = new string(Code);
                            }
                        }
                    }
                }



                #endregion

                ReqManager[0]["MFNo"] = MFCode + "-" + PrCode + "-" + MFMjCode + "-" + ReqManager[0]["MFSerialNo"].ToString();
                ReqManager.Save();
                

                dtOfImg = (DataTable)Session["TblOfImgOfRe"];

                if (dtOfImg.DefaultView.Count > 0)
                {
                    for (int i = 0; i < dtOfImg.DefaultView.Count; i++)
                    {
                        DataRow drImg = attachManager.NewRow();
                        drImg["TtId"] = (int)TSP.DataManager.TableCodes.OfficeRequest;
                        drImg["RefTable"] = ReqManager[0]["OfReId"];
                        drImg["AttId"] = 1;
                        drImg["FilePath"] = dtOfImg.Rows[i]["ImgUrl"].ToString();
                        drImg["IsValid"] = 1;
                        drImg["Description"] = dtOfImg.Rows[i]["Description"].ToString();
                        drImg["UserId"] = Utility.GetCurrentUser_UserId();
                        drImg["ModfiedDate"] = DateTime.Now;
                        attachManager.AddRow(drImg);
                        int imgcnt = attachManager.Save();
                        attachManager.DataTable.AcceptChanges();
                        if (imgcnt == 1)
                        {
                            dtOfImg.Rows[i].BeginEdit();
                            dtOfImg.Rows[i]["Code"] = attachManager[attachManager.Count - 1]["AttachId"].ToString();
                            dtOfImg.Rows[i].EndEdit();

                            if (!Utility.IsDBNullOrNullValue(dtOfImg.Rows[i]["ImgUrl"]))
                            {
                                string ImgSoource = Server.MapPath("~/image/Temp/") + dtOfImg.Rows[i]["fileName"].ToString();
                                string ImgTarget = Server.MapPath(dtOfImg.Rows[i]["ImgUrl"].ToString());
                                File.Copy(ImgSoource, ImgTarget, true);

                            }

                        }
                    }
                }
                
                int TableId = int.Parse(ReqManager[0]["OfReId"].ToString());
                int TaskCode = (int)TSP.DataManager.WorkFlowTask.DocumentOfOfficeConfirmingSaveInfo;

                int WfStart = WorkFlowStateManager.StartWorkFlow(TableId, TaskCode, OfId, Utility.GetCurrentUser_UserId(), 2);

                if (WfStart > 0)
                {
                    trans.EndSave();
                    ASPxMenu1.Enabled = true;

                    PgMode.Value = Utility.EncryptQS("Edit");
                    ASPxRoundPanel2.HeaderText = "ویرایش";

                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = " ذخیره انجام شد";
                }
                else
                {
                    trans.CancelSave();
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }
            }
            else
            {
                trans.CancelSave();
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }
        catch (Exception err)
        {
            trans.CancelSave();

            if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
            {
                System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;
                if (se.Number == 2601)
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "اطلاعات تکراری می باشد";
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }
        try
        {
            string ImgSoource = Server.MapPath("~/image/Temp/") + Session["FileOfArm2"].ToString();
            string ImgTarget = Server.MapPath("~/Image/Office/Arm/Request/") + Session["FileOfArm2"].ToString();
            System.IO.File.Move(ImgSoource, ImgTarget);
        }

        catch (Exception)
        { }
        try
        {
            string ImgSoource = Server.MapPath("~/image/Temp/") + Session["FileOfSign2"].ToString();
            string ImgTarget = Server.MapPath("~/Image/Office/Sign/Request/") + Session["FileOfSign2"].ToString();
            System.IO.File.Move(ImgSoource, ImgTarget);
           
        }

        catch (Exception)
        { }
    }
    protected void flpOfArm_FileUploadComplete(object sender, DevExpress.Web.ASPxUploadControl.FileUploadCompleteEventArgs e)
    {
        try
        {
            e.CallbackData = SaveImageArm(e.UploadedFile);
        }
        catch (Exception ex)
        {
            e.IsValid = false;
            e.ErrorText = ex.Message;
        }
    }
    protected string SaveImageArm(UploadedFile uploadedFile)
    {
        string ret = "";
        if (uploadedFile.IsValid)
        {
            do
            {
                System.IO.FileInfo ImageType = new FileInfo(uploadedFile.PostedFile.FileName);
                ret = Path.GetRandomFileName() + ImageType.Extension;
            } while (File.Exists(MapPath("~/Image/Office/Arm/Request/") + ret) == true || File.Exists(MapPath("~/Image/Temp/") + ret) == true);
            string tempFileName = MapPath("~/Image/Temp/") + ret;
            uploadedFile.SaveAs(tempFileName, true);
            // Session["ExPlaceUpload"] = tempFileName;
            Session["FileOfArm2"] = ret;

        }
        return ret;
    }
    protected void flpOfSign_FileUploadComplete(object sender, DevExpress.Web.ASPxUploadControl.FileUploadCompleteEventArgs e)
    {
        try
        {
            e.CallbackData = SaveImageSign(e.UploadedFile);
        }
        catch (Exception ex)
        {
            e.IsValid = false;
            e.ErrorText = ex.Message;
        }
    }
    protected string SaveImageSign(UploadedFile uploadedFile)
    {
        string ret = "";
        if (uploadedFile.IsValid)
        {
            do
            {
                System.IO.FileInfo ImageType = new FileInfo(uploadedFile.PostedFile.FileName);
                ret = Path.GetRandomFileName() + ImageType.Extension;
            } while (File.Exists(MapPath("~/Image/Office/Sign/Request/") + ret) == true || File.Exists(MapPath("~/Image/Temp/") + ret) == true);
            string tempFileName = MapPath("~/Image/Temp/") + ret;
            uploadedFile.SaveAs(tempFileName, true);
            // Session["ExPlaceUpload"] = tempFileName;
            Session["FileOfSign2"] = ret;

        }
        return ret;
    }
   
    protected void ASPxMenu1_ItemClick(object source, DevExpress.Web.ASPxMenu.MenuItemEventArgs e)
    {
        Session["TblOfImgOfRe"] = null;


        switch (e.Item.Name)
        {
            case "Agent":
                Response.Redirect("~/Office/OfficeInfo/OfficeAgent.aspx?OfId=" + OfficeId.Value + "&PageMode=" + PgMode.Value + "&OfReId=" + OfficeRequest.Value + "&Mode=" + Utility.EncryptQS("Request"));
                break;
            case "Member":
                Response.Redirect("~/Office/OfficeInfo/OfficeMembers.aspx?OfId=" + OfficeId.Value + "&PageMode=" + PgMode.Value + "&OfReId=" + OfficeRequest.Value + "&Mode=" + Utility.EncryptQS("Request"));
                break;
            case "Letters":
                Response.Redirect("~/Office/OfficeInfo/OfficeLetters.aspx?OfId=" + OfficeId.Value + "&PageMode=" + PgMode.Value + "&OfReId=" + OfficeRequest.Value + "&Mode=" + Utility.EncryptQS("Request"));
                break;
            case "Financial":
                Response.Redirect("~/Office/OfficeInfo/OfficeFinancialStatus.aspx?OfId=" + OfficeId.Value + "&PageMode=" + PgMode.Value + "&OfReId=" + OfficeRequest.Value + "&Mode=" + Utility.EncryptQS("Request"));
                break;
            case "Job":
                Response.Redirect("~/Office/OfficeInfo/OfficeJob.aspx?OfId=" + OfficeId.Value + "&PageMode=" + PgMode.Value + "&OfReId=" + OfficeRequest.Value + "&Mode=" + Utility.EncryptQS("Request"));
                break;
        }
      
    }
    private Boolean CheckPermitionForEdit(int TableId)
    {
        TSP.DataManager.TaskDoerManager TaskDoerManager = new TSP.DataManager.TaskDoerManager();
        TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        WorkFlowStateManager.ClearBeforeFill = true;
        int TaskOrder = -1;
        int TaskCode = (int)TSP.DataManager.WorkFlowTask.DocumentOfOfficeConfirmingSaveInfo;
        WorkFlowTaskManager.FindByTaskCode(TaskCode);
        if (WorkFlowTaskManager.Count > 0)
        {
            TaskOrder = int.Parse(WorkFlowTaskManager[0]["TaskOrder"].ToString());
            if (TaskOrder != 0)
            {
                int TableType = (int)TSP.DataManager.TableCodes.OfficeRequest;
                DataTable dtWorkFlowLastState = WorkFlowStateManager.SelectLastState(TableType, TableId);
                if (dtWorkFlowLastState.Rows.Count > 0)
                {
                    int CurrentTaskCode = int.Parse(dtWorkFlowLastState.Rows[0]["TaskCode"].ToString());
                    int CurrentNmcId = int.Parse(dtWorkFlowLastState.Rows[0]["NmcId"].ToString());
                    int CurrentNmcIdType = int.Parse(dtWorkFlowLastState.Rows[0]["NmcIdType"].ToString());
                    int CurrentTaskId = int.Parse(dtWorkFlowLastState.Rows[0]["TaskId"].ToString());
                    int CurrentWorkFlowCode = int.Parse(dtWorkFlowLastState.Rows[0]["WorkFlowCode"].ToString());
                    int DocMeFileSaveInfoTaskCode = (int)TSP.DataManager.WorkFlowTask.DocumentOfOfficeConfirmingSaveInfo;

                    if (CurrentTaskCode == DocMeFileSaveInfoTaskCode)
                    {
                        DataTable dtWorkFlowState = WorkFlowStateManager.SelectByTableType(TableType, TableId);
                        if (dtWorkFlowState.Rows.Count > 0)
                        {
                            int FirstTaskCode = int.Parse(dtWorkFlowState.Rows[0]["TaskCode"].ToString());
                            int FirstNmcId = int.Parse(dtWorkFlowState.Rows[0]["NmcId"].ToString());
                            int FirstNmcIdType = int.Parse(dtWorkFlowState.Rows[0]["NmcIdType"].ToString());
                            if (FirstTaskCode == DocMeFileSaveInfoTaskCode)
                            {
                                if (FirstNmcIdType == 2)
                                {
                                    if (FirstNmcId == Utility.GetCurrentUser_MeId())
                                    {
                                        return true;
                                    }
                                   
                                }
                               
                            }
                           
                        }
                       
                    }
                   
                }
               
            }
           
        }

        return false;
    }
    protected void Edit(int OfReId)
    {
        string fileNameArm = "", fileNameSign = "", pathAx = "", extension = "";
        byte[] img = null;
        bool chArmEdit = false;
        bool chSignEdit = false;

        TSP.DataManager.TransactionManager trans = new TSP.DataManager.TransactionManager();
        TSP.DataManager.OfficeRequestManager ReqManager = new TSP.DataManager.OfficeRequestManager();
        TSP.DataManager.AttachmentsManager attachManager = new TSP.DataManager.AttachmentsManager();
        trans.Add(ReqManager);
        trans.Add(attachManager);

        try
        {
            ReqManager.FindByCode(OfReId);
            if (ReqManager.Count > 0)
            {
                ReqManager[0].BeginEdit();
                ReqManager[0]["OfName"] = txtName.Text;
                ReqManager[0]["OfNameEn"] = txtNameEn.Text;
                if (txtOfTel1_pre.Text != "" && txtOfTel1.Text != "")
                    ReqManager[0]["Tel1"] = txtOfTel1_pre.Text + "-" + txtOfTel1.Text;
                else if (txtOfTel1.Text != "")
                    ReqManager[0]["Tel1"] = txtOfTel1.Text;
                if (txtOfTel2_pre.Text != "" && txtOfTel2.Text != "")
                    ReqManager[0]["Tel2"] = txtOfTel2_pre.Text + "-" + txtOfTel2.Text;
                else if (txtOfTel2.Text != "")
                    ReqManager[0]["Tel2"] = txtOfTel2.Text;
                if (txtOfFax_pre.Text != "" && txtOfFax.Text != "")
                    ReqManager[0]["Fax"] = txtOfFax_pre.Text + "-" + txtOfFax.Text;
                else if (txtOfFax.Text != "")
                    ReqManager[0]["Fax"] = txtOfFax.Text;
                ReqManager[0]["MobileNo"] = txtOfMobile.Text;
                ReqManager[0]["Email"] = txtOfEmail.Text;
                ReqManager[0]["Website"] = txtOfWebsite.Text;
                ReqManager[0]["Address"] = txtOfAddress.Text;

                #region editArmImage
                if (Session["FileOfArm2"] != null)
                {
                    if ((!string.IsNullOrEmpty(ReqManager[0]["ArmUrl"].ToString())) && (System.IO.File.Exists(Server.MapPath(ReqManager[0]["ArmUrl"].ToString()))))
                    {

                        System.IO.File.Delete(Server.MapPath(ReqManager[0]["ArmUrl"].ToString()));

                        pathAx = Server.MapPath("~/Image/Temp/");
                        imgOfArm.ImageUrl = pathAx + Session["FileOfArm2"].ToString();

                        ReqManager[0]["ArmUrl"] = "~/Image/Office/Arm/Request/" + Session["FileOfArm2"].ToString();
                        chArmEdit = true;



                    }
                    else
                    {

                        pathAx = Server.MapPath("~/Image/Temp/");
                        imgOfArm.ImageUrl = pathAx + Session["FileOfArm2"].ToString();

                        ReqManager[0]["ArmUrl"] = "~/Image/Office/Arm/Request/" + Session["FileOfArm2"].ToString();
                        chArmEdit = true;



                    }
                }
                #endregion
                #region editSignImage
                if (Session["FileOfSign2"] != null)
                {
                    if ((!string.IsNullOrEmpty(ReqManager[0]["SignUrl"].ToString())) && (System.IO.File.Exists(Server.MapPath(ReqManager[0]["SignUrl"].ToString()))))
                    {

                        System.IO.File.Delete(Server.MapPath(ReqManager[0]["SignUrl"].ToString()));

                        pathAx = Server.MapPath("~/Image/Temp/");
                        imgOfSign.ImageUrl = pathAx + Session["FileOfSign2"].ToString();

                        ReqManager[0]["SignUrl"] = "~/Image/Office/Sign/Request/" + Session["FileOfSign2"].ToString();
                        chSignEdit = true;



                    }
                    else
                    {

                        pathAx = Server.MapPath("~/Image/Temp/");
                        imgOfSign.ImageUrl = pathAx + Session["FileOfSign2"].ToString();
                        ReqManager[0]["SignUrl"] = "~/Image/Office/Sign/Request/" + Session["FileOfSign2"].ToString();
                        chSignEdit = true;


                    }
                }
                #endregion
                ReqManager[0]["RequestDesc"] = txtDesc.Text;

                if (ComboMFType.Value != null)
                    ReqManager[0]["MFType"] = ComboMFType.Value;
                ReqManager[0]["UserId"] = Utility.GetCurrentUser_UserId();
                ReqManager[0].EndEdit();
                trans.BeginSave();
                if (ReqManager.Save() == 1)
                {
                    dtOfImg = (DataTable)Session["TblOfImgOfRe"];

                    if (dtOfImg.GetChanges() != null)
                    {
                        DataRow[] delRows = dtOfImg.Select("Mode='1'", null, DataViewRowState.Deleted);
                        for (int i = 0; i < delRows.Length; i++)
                        {
                            attachManager.FindByCode(int.Parse(delRows[i]["Code", DataRowVersion.Original].ToString()));
                            attachManager[0].Delete();
                            attachManager.Save();
                        }
                        attachManager.DataTable.AcceptChanges();

                        DataRow[] insRows = dtOfImg.Select(null, null, DataViewRowState.Added);

                        if (insRows.Length > 0)
                        {
                            for (int i = 0; i < insRows.Length; i++)
                            {
                                DataRow drImg = attachManager.NewRow();
                                drImg["TtId"] = (int)TSP.DataManager.TableCodes.OfficeRequest;
                                drImg["RefTable"] = OfReId;
                                drImg["AttId"] = 1;
                                drImg["FilePath"] = dtOfImg.Rows[i]["ImgUrl"].ToString();
                                drImg["IsValid"] = 1;
                                drImg["Description"] = dtOfImg.Rows[i]["Description"].ToString();
                                drImg["UserId"] = Utility.GetCurrentUser_UserId();
                                drImg["ModfiedDate"] = DateTime.Now;
                                attachManager.AddRow(drImg);
                                int imgcnt = attachManager.Save();
                                attachManager.DataTable.AcceptChanges();
                                if (imgcnt == 1)
                                {
                                    dtOfImg.Rows[i].BeginEdit();
                                    dtOfImg.Rows[i]["Code"] = attachManager[attachManager.Count - 1]["AttachId"].ToString();
                                    dtOfImg.Rows[i].EndEdit();

                                    if (!Utility.IsDBNullOrNullValue(dtOfImg.Rows[i]["ImgUrl"]))
                                    {
                                        string ImgSoource = Server.MapPath("~/image/Temp/") + dtOfImg.Rows[i]["fileName"].ToString();
                                        string ImgTarget = Server.MapPath(dtOfImg.Rows[i]["ImgUrl"].ToString());
                                        File.Move(ImgSoource, ImgTarget);

                                    }

                                }
                            }

                        }

                    }

                    PgMode.Value = Utility.EncryptQS("Edit");
                    ASPxRoundPanel2.HeaderText = "ویرایش";
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "ذخیره انجام شد";
                    trans.EndSave();


                }
                else
                {
                    trans.CancelSave();
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }

            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در بازخوانی اطلاعات رخ داده است";
            }
        }

        catch (Exception err)
        {
            trans.CancelSave();

            if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
            {
                System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;
                if (se.Number == 2601)
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "اطلاعات تکراری می باشد";
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }

        }
        if (Session["FileOfArm2"] != null)
        {
            if (chArmEdit == true)
            {
                try
                {
                    string ArmSoource = Server.MapPath("~/image/Temp/") + Session["FileOfArm2"].ToString();
                    string ArmTarget = Server.MapPath("~/Image/Office/Arm/") + Session["FileOfArm2"].ToString();
                    System.IO.File.Copy(ArmSoource, ArmTarget, true);
                    imgOfArm.ImageUrl = "~/Image/Office/Arm/" + Session["FileOfArm2"].ToString();


                }
                catch (Exception)
                {
                }
            }

        }
        if (Session["FileOfSign2"] != null)
        {
            if (chSignEdit == true)
            {
                try
                {
                    string SignSoource = Server.MapPath("~/image/Temp/") + Session["FileOfSign2"].ToString();
                    string SignTarget = Server.MapPath("~/Image/Office/Sign/") + Session["FileOfSign2"].ToString();
                    System.IO.File.Copy(SignSoource, SignTarget, true);
                    imgOfSign.ImageUrl = "~/Image/Office/Sign/" + Session["FileOfSign2"].ToString();

                }
                catch (Exception)
                {
                }

            }

        }
    }
    protected void Change(int OfId,int OfReId)
    {
        TSP.DataManager.TransactionManager trans = new TSP.DataManager.TransactionManager();
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        TSP.DataManager.OfficeRequestManager ReqManager = new TSP.DataManager.OfficeRequestManager();
        TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();

        ReqManager.ClearBeforeFill = true;
        WorkFlowTaskManager.ClearBeforeFill = true;

        trans.Add(WorkFlowStateManager);
        trans.Add(ReqManager);

        try
        {
            ReqManager.FindByCode(OfReId);
            if (ReqManager.Count > 0)
            {
                 int TableType = (int)TSP.DataManager.TableCodes.OfficeRequest;
                DataTable dtWfState = WorkFlowStateManager.SelectLastState(TableType, OfReId);
                if (dtWfState.Rows.Count > 0)
                {
                    int CurrentTaskId = int.Parse(dtWfState.Rows[0]["TaskId"].ToString());
                    int RejectTaskCode = (int)TSP.DataManager.WorkFlowTask.RejectDocumentOfOfficeAndEndProcess;
                    int ConfirmTaskCode = (int)TSP.DataManager.WorkFlowTask.ConfirmDocumentOfOfficeAndEndProccess;
                    int SaveInfoTaskCode = (int)TSP.DataManager.WorkFlowTask.DocumentOfOfficeConfirmingSaveInfo;

                    int RejectTaskId = -1;
                    int ConfirmTaskId = -1;
                    int SaveInfoTaskId = -1;

                    WorkFlowTaskManager.FindByTaskCode(SaveInfoTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        SaveInfoTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }


                    WorkFlowTaskManager.FindByTaskCode(RejectTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        RejectTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }

                    WorkFlowTaskManager.FindByTaskCode(ConfirmTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        ConfirmTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }
                    if (CurrentTaskId == RejectTaskId || CurrentTaskId == ConfirmTaskId)
                    {
                        if (ReqManager[0]["IsConfirm"].ToString() != "0")
                        {
                            DataRow drReq = ReqManager.NewRow();

                            drReq["OfId"] = OfId;
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFSerialNo"]))
                                drReq["MFSerialNo"] = ReqManager[0]["MFSerialNo"].ToString();
                            //if (!Utility.IsDBNullOrNullValue(ReqManager[0]["SerialNo"]))
                            //    drReq["SerialNo"] = ReqManager[0]["SerialNo"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["RegDate"]))
                                drReq["RegDate"] = ReqManager[0]["RegDate"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["ExpireDate"]))
                                drReq["ExpireDate"] = ReqManager[0]["ExpireDate"].ToString();
                            drReq["Type"] = 3;//تغییرات
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["PrId"]))
                                drReq["PrId"] = ReqManager[0]["PrId"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["RegPlaceId"]))
                                drReq["RegPlaceId"] = ReqManager[0]["RegPlaceId"].ToString();
                            //if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                            //    drReq["MFNo"] = ReqManager[0]["MFNo"].ToString();

                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                            {
                                string MFNo = ReqManager[0]["MFNo"].ToString();
                                string[] MFNoMajor = MFNo.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
                                string Code = MFNoMajor[0];

                                if (ComboMFType.Value != null)
                                {
                                    drReq["MFType"] = ComboMFType.Value;

                                    if (ComboMFType.Value.ToString() == "1")//طراح و ناظر
                                        MFNoMajor[0] = "2";
                                    else if (ComboMFType.Value.ToString() == "2")//مجری
                                        MFNoMajor[0] = "19";


                                    drReq["MFNo"] = MFNo;

                                    MFNo = string.Join("-", MFNoMajor);

                                    drReq["MFNo"] = MFNo;
                                }

                                else if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                                {
                                    drReq["MFNo"] = ReqManager[0]["MFNo"];
                                    drReq["MFType"] = ReqManager[0]["MFType"];
                                }
                            }


                            drReq["IsConfirm"] = 0;
                            drReq["InActive"] = 0;
                            drReq["RequestDesc"] = txtDesc.Text;
                            drReq["UserId"] = Utility.GetCurrentUser_UserId();
                            drReq["ModifiedDate"] = DateTime.Now;
                            drReq["OfName"] = txtName.Text;
                            drReq["OfNameEn"] = txtNameEn.Text;
                            if (txtOfTel1_pre.Text != "" && txtOfTel1.Text != "")
                                drReq["Tel1"] = txtOfTel1_pre.Text + "-" + txtOfTel1.Text;
                            else if (txtOfTel1.Text != "")
                                drReq["Tel1"] = txtOfTel1.Text;
                            if (txtOfTel2_pre.Text != "" && txtOfTel2.Text != "")
                                drReq["Tel2"] = txtOfTel2_pre.Text + "-" + txtOfTel2.Text;
                            else if (txtOfTel2.Text != "")
                                drReq["Tel2"] = txtOfTel2.Text;
                            if (txtOfFax_pre.Text != "" && txtOfFax.Text != "")
                                drReq["Fax"] = txtOfFax_pre.Text + "-" + txtOfFax.Text;
                            else if (txtOfFax.Text != "")
                                drReq["Fax"] = txtOfFax.Text;
                            drReq["MobileNo"] = txtOfMobile.Text;
                            drReq["Email"] = txtOfEmail.Text;
                            drReq["Website"] = txtOfWebsite.Text;
                            drReq["Address"] = txtOfAddress.Text;
                            drReq["CreateDate"] = Utility.GetDateOfToday();
                           

                            drReq["Requester"] = 0;
                            drReq["FollowCode"] = Utility.GenFollowCode(Utility.FollowType.OfficeRequest);

                            if (Session["FileOfArm2"] != null)
                            {
                                imgOfArm.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfArm2"].ToString();
                                drReq["ArmUrl"] = "~/Image/Office/Arm/" + Session["FileOfArm2"].ToString();
                            }
                            else
                                drReq["ArmUrl"] = imgOfArm.ImageUrl;

                            if (Session["FileOfSign2"] != null)
                            {
                                imgOfSign.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfSign2"].ToString();
                                drReq["SignUrl"] = "~/Image/Office/Sign/" + Session["FileOfSign2"].ToString();

                            }
                            else
                                drReq["SignUrl"] = imgOfSign.ImageUrl;


                            ReqManager.AddRow(drReq);
                            trans.BeginSave();

                            int cn = ReqManager.Save();
                            if (cn > 0)
                            {
                                DataRow WFStateRow = WorkFlowStateManager.NewRow();
                                int NmcId = OfId;
                                if (NmcId > 0)
                                {

                                    WFStateRow["TaskId"] = SaveInfoTaskId;
                                    WFStateRow["TableId"] = ReqManager[ReqManager.Count - 1]["OfReId"];
                                    WFStateRow["NmcIdType"] = 2;
                                    WFStateRow["NmcId"] = NmcId;
                                    WFStateRow["SubOrder"] = 1;
                                    WFStateRow["StateType"] = 0;
                                    WFStateRow["Description"] = "شروع جریان کار درخواست تغییرات پروانه اشتغال";
                                    WFStateRow["Date"] = Utility.GetDateOfToday();
                                    WFStateRow["UserId"] = Utility.GetCurrentUser_UserId();
                                    WFStateRow["ModifiedDate"] = DateTime.Now;

                                    WorkFlowStateManager.AddRow(WFStateRow);

                                    int count = WorkFlowStateManager.Save();
                                    if (count > 0)
                                    {
                                        trans.EndSave();
                                        OfficeRequest.Value = Utility.EncryptQS(ReqManager[ReqManager.Count - 1]["OfReId"].ToString());
                                        PgMode.Value = Utility.EncryptQS("Edit");

                                        DivReport.Visible = true;
                                        LabelWarning.Text = "ذخیره انجام شد.";
                                        ASPxMenu1.Enabled = true;

                                        ASPxRoundPanel2.HeaderText = "ویرایش";

                                    }
                                    else
                                    {
                                        trans.CancelSave();
                                        DivReport.Visible = true;
                                        LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                    }
                                }
                                else
                                {
                                    trans.CancelSave();
                                    DivReport.Visible = true;
                                    LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                }
                            }
                            else
                            {
                                trans.CancelSave();
                                DivReport.Visible = true;
                                LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                            }
                        }
                        else
                        {
                            DivReport.Visible = true;
                            LabelWarning.Text = "امکان تمدید برای پروانه تایید نشده وجود ندارد.";
                        }
                    }
                    else
                    {
                        DivReport.Visible = true;
                        LabelWarning.Text = "به دلیل به پایان نرسیدن جریان کار پروانه انتخاب شده امکان درخواست تغییرات وجود ندارد.";
                    }
                }
                else
                {
                    DivReport.Visible = true;
                    LabelWarning.Text = "برای پرونده انتخاب شده جریان کاری تعریف نشده است.";
                }
            }
            else
            {
                DivReport.Visible = true;
                LabelWarning.Text = "خطایی در بازخوانی اطلاعات رخ داده است";
            }
        }

        catch (Exception err)
        {
            trans.CancelSave();
            if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
            {
                System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;
                if (se.Number == 2601)
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "اطلاعات تکراری می باشد";
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }

    }
    private void Revival(int OfId, int OfReId)
    {
        TSP.DataManager.TransactionManager trans = new TSP.DataManager.TransactionManager();
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        TSP.DataManager.OfficeRequestManager ReqManager = new TSP.DataManager.OfficeRequestManager();
        TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();
        WorkFlowTaskManager.ClearBeforeFill = true;
        ReqManager.ClearBeforeFill = true;

        trans.Add(WorkFlowStateManager);
        trans.Add(ReqManager);

        try
        {
            ReqManager.FindByCode(OfReId);
            if (ReqManager.Count == 1)
            {
                int TableType = (int)TSP.DataManager.TableCodes.OfficeRequest;
                DataTable dtWfState = WorkFlowStateManager.SelectLastState(TableType, OfReId);
                if (dtWfState.Rows.Count > 0)
                {
                    int CurrentTaskId = int.Parse(dtWfState.Rows[0]["TaskId"].ToString());
                    int RejectTaskCode = (int)TSP.DataManager.WorkFlowTask.RejectDocumentOfOfficeAndEndProcess;
                    int ConfirmTaskCode = (int)TSP.DataManager.WorkFlowTask.ConfirmDocumentOfOfficeAndEndProccess;
                    int SaveInfoTaskCode = (int)TSP.DataManager.WorkFlowTask.DocumentOfOfficeConfirmingSaveInfo;

                    int RejectTaskId = -1;
                    int ConfirmTaskId = -1;
                    int SaveInfoTaskId = -1;

                    WorkFlowTaskManager.FindByTaskCode(SaveInfoTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        SaveInfoTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }


                    WorkFlowTaskManager.FindByTaskCode(RejectTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        RejectTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }

                    WorkFlowTaskManager.FindByTaskCode(ConfirmTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        ConfirmTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }
                    if (CurrentTaskId == RejectTaskId || CurrentTaskId == ConfirmTaskId)
                    {
                        if (ReqManager[0]["IsConfirm"].ToString() != "0")
                        {
                            string CrtEndDate = ReqManager[0]["ExpireDate"].ToString();
                            Utility.Date objDate = new Utility.Date(CrtEndDate);
                            string LastMonth = objDate.AddMonths(-1);
                            string Today = Utility.GetDateOfToday();
                            int IsDocExp = string.Compare(Today, LastMonth);
                            if (IsDocExp > 0)
                            {

                                DataRow drReq = ReqManager.NewRow();

                                drReq["OfId"] = OfId;
                                if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFSerialNo"]))
                                    drReq["MFSerialNo"] = ReqManager[0]["MFSerialNo"].ToString();
                                //if (!Utility.IsDBNullOrNullValue(ReqManager[0]["SerialNo"]))
                                //    drReq["SerialNo"] = ReqManager[0]["SerialNo"].ToString();
                                if (!Utility.IsDBNullOrNullValue(ReqManager[0]["RegDate"]))
                                    drReq["RegDate"] = ReqManager[0]["RegDate"].ToString();
                                drReq["ExpireDate"] = "";
                                drReq["Type"] = 2;//تمدید
                                if (!Utility.IsDBNullOrNullValue(ReqManager[0]["PrId"]))
                                    drReq["PrId"] = ReqManager[0]["PrId"].ToString();
                                if (!Utility.IsDBNullOrNullValue(ReqManager[0]["RegPlaceId"]))
                                    drReq["RegPlaceId"] = ReqManager[0]["RegPlaceId"].ToString();
                                if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                                    drReq["MFNo"] = ReqManager[0]["MFNo"].ToString();
                                drReq["IsConfirm"] = 0;
                                drReq["InActive"] = 0;
                                drReq["RequestDesc"] = txtDesc.Text;
                                drReq["UserId"] = Utility.GetCurrentUser_UserId();
                                drReq["ModifiedDate"] = DateTime.Now;
                                drReq["OfName"] = txtName.Text;
                                drReq["OfNameEn"] = txtNameEn.Text;
                                if (txtOfTel1_pre.Text != "" && txtOfTel1.Text != "")
                                    drReq["Tel1"] = txtOfTel1_pre.Text + "-" + txtOfTel1.Text;
                                else if (txtOfTel1.Text != "")
                                    drReq["Tel1"] = txtOfTel1.Text;
                                if (txtOfTel2_pre.Text != "" && txtOfTel2.Text != "")
                                    drReq["Tel2"] = txtOfTel2_pre.Text + "-" + txtOfTel2.Text;
                                else if (txtOfTel2.Text != "")
                                    drReq["Tel2"] = txtOfTel2.Text;
                                if (txtOfFax_pre.Text != "" && txtOfFax.Text != "")
                                    drReq["Fax"] = txtOfFax_pre.Text + "-" + txtOfFax.Text;
                                else if (txtOfFax.Text != "")
                                    drReq["Fax"] = txtOfFax.Text;
                                drReq["MobileNo"] = txtOfMobile.Text;
                                drReq["Email"] = txtOfEmail.Text;
                                drReq["Website"] = txtOfWebsite.Text;
                                drReq["Address"] = txtOfAddress.Text;
                                drReq["CreateDate"] = Utility.GetDateOfToday();
                                if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                                {
                                    string MFNo = ReqManager[0]["MFNo"].ToString();
                                    string[] MFNoMajor = MFNo.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
                                    string Code = MFNoMajor[0];

                                    if (ComboMFType.Value != null)
                                    {
                                        drReq["MFType"] = ComboMFType.Value;

                                        if (ComboMFType.Value.ToString() == "1")//طراح و ناظر
                                            MFNoMajor[0] = "2";
                                        else if (ComboMFType.Value.ToString() == "2")//مجری
                                            MFNoMajor[0] = "19";


                                        drReq["MFNo"] = MFNo;

                                        MFNo = string.Join("-", MFNoMajor);

                                        drReq["MFNo"] = MFNo;
                                    }

                                    else if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                                    {
                                        drReq["MFNo"] = ReqManager[0]["MFNo"];
                                        drReq["MFType"] = ReqManager[0]["MFType"];
                                    }
                                }

                                drReq["Requester"] = 0;
                                drReq["FollowCode"] = Utility.GenFollowCode(Utility.FollowType.OfficeRequest);

                                if (Session["FileOfArm2"] != null)
                                {
                                    imgOfArm.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfArm2"].ToString();
                                    drReq["ArmUrl"] = "~/Image/Office/Arm/" + Session["FileOfArm2"].ToString();
                                }
                                else
                                    drReq["ArmUrl"] = imgOfArm.ImageUrl;

                                if (Session["FileOfSign2"] != null)
                                {
                                    imgOfSign.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfSign2"].ToString();
                                    drReq["SignUrl"] = "~/Image/Office/Sign/" + Session["FileOfSign2"].ToString();

                                }
                                else
                                    drReq["SignUrl"] = imgOfSign.ImageUrl;


                                ReqManager.AddRow(drReq);
                                trans.BeginSave();

                                int cn = ReqManager.Save();
                                if (cn > 0)
                                {
                                    DataRow WFStateRow = WorkFlowStateManager.NewRow();
                                    int NmcId = OfId;
                                    if (NmcId > 0)
                                    {

                                        WFStateRow["TaskId"] = SaveInfoTaskId;
                                        WFStateRow["TableId"] = ReqManager[ReqManager.Count - 1]["OfReId"];
                                        WFStateRow["NmcIdType"] = 2;
                                        WFStateRow["NmcId"] = NmcId;
                                        WFStateRow["SubOrder"] = 1;
                                        WFStateRow["StateType"] = 0;
                                        WFStateRow["Description"] = "شروع جریان کار تمدید پروانه اشتغال";
                                        WFStateRow["Date"] = Utility.GetDateOfToday();
                                        WFStateRow["UserId"] = Utility.GetCurrentUser_UserId();
                                        WFStateRow["ModifiedDate"] = DateTime.Now;

                                        WorkFlowStateManager.AddRow(WFStateRow);

                                        int count = WorkFlowStateManager.Save();
                                        if (count > 0)
                                        {

                                            trans.EndSave();
                                            DivReport.Visible = true;
                                            LabelWarning.Text = "ذخیره انجام شد.";
                                            ASPxRoundPanel2.HeaderText = "ویرایش";
                                            ASPxMenu1.Enabled = true;


                                        }
                                        else
                                        {
                                            trans.CancelSave();
                                            DivReport.Visible = true;
                                            LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                        }
                                    }
                                    else
                                    {
                                        trans.CancelSave();
                                        DivReport.Visible = true;
                                        LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                    }
                                }
                                else
                                {
                                    trans.CancelSave();
                                    DivReport.Visible = true;
                                    LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                }
                            }
                            else
                            {
                                trans.CancelSave();
                                DivReport.Visible = true;
                                LabelWarning.Text = "تاریخ اعتبار پروانه انتخاب شده به پایان نرسیده است.";
                            }
                        }
                        else
                        {
                            DivReport.Visible = true;
                            LabelWarning.Text = "امکان تمدید برای پروانه تایید نشده وجود ندارد.";
                        }
                    }
                    else
                    {
                        DivReport.Visible = true;
                        LabelWarning.Text = "به دلیل به پایان نرسیدن جریان کار پروانه انتخاب شده امکان درخواست تغییرات وجود ندارد.";
                    }
                }
                else
                {
                    DivReport.Visible = true;
                    LabelWarning.Text = "برای پرونده انتخاب شده جریان کاری تعریف نشده است.";
                }
            }
            else
            {
                DivReport.Visible = true;
                LabelWarning.Text = "به دلیل به پایان نرسیدن جریان کار پروانه انتخاب شده امکان درخواست تمدید وجود ندارد.";
            }

              
        }
        catch (Exception err)
        {
            trans.CancelSave();
            if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
            {
                System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;
                if (se.Number == 2601)
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "اطلاعات تکراری می باشد";
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }
    }
    protected void Reduplicate(int OfId, int OfReId)
    {
        TSP.DataManager.TransactionManager trans = new TSP.DataManager.TransactionManager();
        TSP.DataManager.WorkFlowStateManager WorkFlowStateManager = new TSP.DataManager.WorkFlowStateManager();
        TSP.DataManager.OfficeRequestManager ReqManager = new TSP.DataManager.OfficeRequestManager();
        TSP.DataManager.WorkFlowTaskManager WorkFlowTaskManager = new TSP.DataManager.WorkFlowTaskManager();

        ReqManager.ClearBeforeFill = true;
        WorkFlowTaskManager.ClearBeforeFill = true;

        trans.Add(WorkFlowStateManager);
        trans.Add(ReqManager);

        try
        {
            ReqManager.FindByCode(OfReId);
            if (ReqManager.Count > 0)
            {
                int TableType = (int)TSP.DataManager.TableCodes.OfficeRequest;
                DataTable dtWfState = WorkFlowStateManager.SelectLastState(TableType, OfReId);
                if (dtWfState.Rows.Count > 0)
                {
                    int CurrentTaskId = int.Parse(dtWfState.Rows[0]["TaskId"].ToString());
                    int RejectTaskCode = (int)TSP.DataManager.WorkFlowTask.RejectDocumentOfOfficeAndEndProcess;
                    int ConfirmTaskCode = (int)TSP.DataManager.WorkFlowTask.ConfirmDocumentOfOfficeAndEndProccess;
                    int SaveInfoTaskCode = (int)TSP.DataManager.WorkFlowTask.DocumentOfOfficeConfirmingSaveInfo;

                    int RejectTaskId = -1;
                    int ConfirmTaskId = -1;
                    int SaveInfoTaskId = -1;

                    WorkFlowTaskManager.FindByTaskCode(SaveInfoTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        SaveInfoTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }


                    WorkFlowTaskManager.FindByTaskCode(RejectTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        RejectTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }

                    WorkFlowTaskManager.FindByTaskCode(ConfirmTaskCode);
                    if (WorkFlowTaskManager.Count > 0)
                    {
                        ConfirmTaskId = int.Parse(WorkFlowTaskManager[0]["TaskId"].ToString());
                    }
                    if (CurrentTaskId == RejectTaskId || CurrentTaskId == ConfirmTaskId)
                    {
                        if (ReqManager[0]["IsConfirm"].ToString() != "0")
                        {
                            string MFNo = ReqManager[0]["MFNo"].ToString();
                            string[] MFNoMajor = MFNo.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);

                            DataRow drReq = ReqManager.NewRow();

                            drReq["OfId"] = OfId;

                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFSerialNo"]))
                                drReq["MFSerialNo"] = ReqManager[0]["MFSerialNo"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["RegDate"]))
                                drReq["RegDate"] = ReqManager[0]["RegDate"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["ExpireDate"]))
                                drReq["ExpireDate"] = ReqManager[0]["ExpireDate"].ToString();
                            drReq["Type"] = 5;//المثنی
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["PrId"]))
                                drReq["PrId"] = ReqManager[0]["PrId"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["RegPlaceId"]))
                                drReq["RegPlaceId"] = ReqManager[0]["RegPlaceId"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFNo"]))
                                drReq["MFNo"] = ReqManager[0]["MFNo"].ToString();
                            if (!Utility.IsDBNullOrNullValue(ReqManager[0]["MFType"]))
                                drReq["MFType"] = ReqManager[0]["MFType"].ToString();


                            drReq["IsConfirm"] = 0;
                            drReq["InActive"] = 0;
                            drReq["RequestDesc"] = txtDesc.Text;
                            drReq["UserId"] = Utility.GetCurrentUser_UserId();
                            drReq["ModifiedDate"] = DateTime.Now;
                            drReq["OfName"] = txtName.Text;
                            drReq["OfNameEn"] = txtNameEn.Text;
                            if (txtOfTel1_pre.Text != "" && txtOfTel1.Text != "")
                                drReq["Tel1"] = txtOfTel1_pre.Text + "-" + txtOfTel1.Text;
                            else if (txtOfTel1.Text != "")
                                drReq["Tel1"] = txtOfTel1.Text;
                            if (txtOfTel2_pre.Text != "" && txtOfTel2.Text != "")
                                drReq["Tel2"] = txtOfTel2_pre.Text + "-" + txtOfTel2.Text;
                            else if (txtOfTel2.Text != "")
                                drReq["Tel2"] = txtOfTel2.Text;
                            if (txtOfFax_pre.Text != "" && txtOfFax.Text != "")
                                drReq["Fax"] = txtOfFax_pre.Text + "-" + txtOfFax.Text;
                            else if (txtOfFax.Text != "")
                                drReq["Fax"] = txtOfFax.Text;
                            drReq["MobileNo"] = txtOfMobile.Text;
                            drReq["Email"] = txtOfEmail.Text;
                            drReq["Website"] = txtOfWebsite.Text;
                            drReq["Address"] = txtOfAddress.Text;
                            drReq["CreateDate"] = Utility.GetDateOfToday();

                            drReq["Requester"] = 0;
                            drReq["FollowCode"] = Utility.GenFollowCode(Utility.FollowType.OfficeRequest);

                            if (Session["FileOfArm2"] != null)
                            {
                                imgOfArm.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfArm2"].ToString();
                                drReq["ArmUrl"] = "~/Image/Office/Arm/" + Session["FileOfArm2"].ToString();
                            }
                            else
                                drReq["ArmUrl"] = imgOfArm.ImageUrl;

                            if (Session["FileOfSign2"] != null)
                            {
                                imgOfSign.ImageUrl = Server.MapPath("~/Image/Temp/") + Session["FileOfSign2"].ToString();
                                drReq["SignUrl"] = "~/Image/Office/Sign/" + Session["FileOfSign2"].ToString();

                            }
                            else
                                drReq["SignUrl"] = imgOfSign.ImageUrl;


                            ReqManager.AddRow(drReq);
                            trans.BeginSave();

                            int cn = ReqManager.Save();
                            if (cn > 0)
                            {
                                DataRow WFStateRow = WorkFlowStateManager.NewRow();
                                int NmcId = OfId;
                                if (NmcId > 0)
                                {

                                    WFStateRow["TaskId"] = SaveInfoTaskId;
                                    WFStateRow["TableId"] = ReqManager[ReqManager.Count - 1]["OfReId"];
                                    WFStateRow["NmcIdType"] = 2;
                                    WFStateRow["NmcId"] = NmcId;
                                    WFStateRow["SubOrder"] = 1;
                                    WFStateRow["StateType"] = 0;
                                    WFStateRow["Description"] = "شروع جریان کار درخواست المثنی پروانه اشتغال";
                                    WFStateRow["Date"] = Utility.GetDateOfToday();
                                    WFStateRow["UserId"] = Utility.GetCurrentUser_UserId();
                                    WFStateRow["ModifiedDate"] = DateTime.Now;

                                    WorkFlowStateManager.AddRow(WFStateRow);

                                    int count = WorkFlowStateManager.Save();
                                    if (count > 0)
                                    {
                                        trans.EndSave();
                                        OfficeRequest.Value = Utility.EncryptQS(ReqManager[ReqManager.Count - 1]["OfReId"].ToString());
                                        PgMode.Value = Utility.EncryptQS("Edit");

                                        DivReport.Visible = true;
                                        LabelWarning.Text = "ذخیره انجام شد.";
                                        ASPxMenu1.Enabled = true;

                                        ASPxRoundPanel2.HeaderText = "ویرایش";

                                    }
                                    else
                                    {
                                        trans.CancelSave();
                                        DivReport.Visible = true;
                                        LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                    }
                                }
                                else
                                {
                                    trans.CancelSave();
                                    DivReport.Visible = true;
                                    LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                                }
                            }
                            else
                            {
                                trans.CancelSave();
                                DivReport.Visible = true;
                                LabelWarning.Text = "خطایی در ذخیره انجام گرفته است.";
                            }
                        }
                        else
                        {
                            DivReport.Visible = true;
                            LabelWarning.Text = "امکان صدور المثنی برای پروانه تایید نشده وجود ندارد.";
                        }
                    }
                    else
                    {
                        DivReport.Visible = true;
                        LabelWarning.Text = "به دلیل به پایان نرسیدن جریان کار پروانه انتخاب شده امکان درخواست صدور المثنی وجود ندارد.";
                    }
                }
                else
                {
                    DivReport.Visible = true;
                    LabelWarning.Text = "برای پرونده انتخاب شده جریان کاری تعریف نشده است.";
                }
            }
            else
            {
                DivReport.Visible = true;
                LabelWarning.Text = "خطایی در بازخوانی اطلاعات رخ داده است";
            }
        }

        catch (Exception err)
        {
            trans.CancelSave();
            if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
            {
                System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;
                if (se.Number == 2601)
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "اطلاعات تکراری می باشد";
                }
                else
                {
                    this.DivReport.Visible = true;
                    this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
                }
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }

    }
   
}
