using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class Members_Amoozesh_InstitueObserveJudgment : System.Web.UI.Page
{
    private bool IsPageRefresh = false;

    #region Events
    protected void Page_Load(object sender, EventArgs e)
    {

        //if (Session["Login"] == null || Session["Login"].ToString() == "0")
        //{
        //    Response.Redirect("../../Login.aspx?ReferPage=" + Request.Url.AbsoluteUri);
        //    return;
        //}
        if (string.IsNullOrEmpty(Request.QueryString["PrPgMd"]) || string.IsNullOrEmpty(Request.QueryString["PageMode"]) || string.IsNullOrEmpty(Request.QueryString["InsId"]))
        {
            Response.Redirect("Institue.aspx");
            return;
        }

        if (!IsPostBack)
        {
            ViewState["postids"] = System.Guid.NewGuid().ToString();
            Session["postid"] = ViewState["postids"].ToString();
        }
        else
        {
            if (!IsCallback && Session["postid"] != null)
            {
                if (ViewState["postids"].ToString() != Session["postid"].ToString()) { IsPageRefresh = true; }
                Session["postid"] = System.Guid.NewGuid().ToString(); ViewState["postids"] = Session["postid"];
            }
        }

        this.DivReport.Visible = false;
        this.DivReport.Attributes.Add("onclick", "ChangeVisible(this)");
        this.DivReport.Attributes.Add("onmouseover", "ChangeIcon(this)");

        if (!IsPostBack)
        {
            TSP.DataManager.Permission per = TSP.DataManager.InstitueObserveManager.GetUserPermission(int.Parse(Session["Login"].ToString()), (TSP.DataManager.UserType)int.Parse(Session["LoginType"].ToString()));
            btnSave.Enabled = per.CanNew || per.CanEdit;
            btnSave2.Enabled = per.CanNew || per.CanEdit;

            SetKeys();
            this.ViewState["BtnSave"] = btnSave.Enabled;
            // this.ViewState["BtnEdit"] = btnEdit.Enabled;
            //  this.ViewState["BtnNew"] = BtnNew.Enabled;
        }
        if (this.ViewState["BtnSave"] != null)
            this.btnSave.Enabled = this.btnSave2.Enabled = (bool)this.ViewState["BtnSave"];
        // if (this.ViewState["BtnEdit"] != null)
        //      this.btnEdit.Enabled = this.btnEdit2.Enabled = (bool)this.ViewState["BtnEdit"];      
        //  if (this.ViewState["BtnNew"] != null)
        //     this.BtnNew.Enabled = this.BtnNew2.Enabled = (bool)this.ViewState["BtnNew"];
    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        if (IsPageRefresh)
            return;
        TSP.DataManager.MemberManager MeManager = Session["MemberManager"] as TSP.DataManager.MemberManager;
        if (MeManager == null)
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "خطایی در صفحه رخ داده است.صفحه را دوباره بارگذاری نمایید.";
            return;
        }

        if ((bool)MeManager[0]["IsLock"] == true)
        {
            string lockers = Utility.GetFormattedObject(Session["MemberLockers"]);
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "به دلیل قفل بودن وضعیت عضویت شما توسط  " + lockers + " امکان ثبت اطلاعات وجود ندارد.";
            return;

        }

        string PageMode = Utility.DecryptQS(HiddenFieldInstitueObserve["PageMode"].ToString());

        string InsObserveId = Utility.DecryptQS(HiddenFieldInstitueObserve["InsObserveId"].ToString());

        if (string.IsNullOrEmpty(PageMode))
        {
            this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());

            return;
        }
        else
        {
            if (PageMode == "New")
            {
                InsertObserve();

            }
            else if (PageMode == "Edit")
            {

                if (string.IsNullOrEmpty(InsObserveId))
                {
                    this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());

                    return;
                }
                else
                {
                    EditObserve(int.Parse(InsObserveId));
                }

            }
        }
    }

    protected void btnBack_Click(object sender, EventArgs e)
    {
        Response.Redirect("AddInstitues.aspx?InsId=" + HiddenFieldInstitueObserve["InsId"].ToString() + "&PageMode=" + HiddenFieldInstitueObserve["PrePageMode"].ToString());
    }
    #endregion

    #region Methods
    private void SetKeys()
    {
        HiddenFieldInstitueObserve["PageMode"] = Server.HtmlDecode(Request.QueryString["PageMode"].ToString());
        HiddenFieldInstitueObserve["InsId"] = Server.HtmlDecode(Request.QueryString["InsId"]).ToString();
        HiddenFieldInstitueObserve["PrePageMode"] = Server.HtmlDecode(Request.QueryString["PrPgMd"]).ToString();
        string PageMode = Utility.DecryptQS(HiddenFieldInstitueObserve["PageMode"].ToString());
        string InsId = Utility.DecryptQS(HiddenFieldInstitueObserve["InsId"].ToString());

        TSP.DataManager.InstitueObserveManager InstitueObserveManager = new TSP.DataManager.InstitueObserveManager();
        InstitueObserveManager.FindByInstitue(int.Parse(InsId));
        string InsObserveId;
        if (InstitueObserveManager.Count > 0)
            HiddenFieldInstitueObserve["InsObserveId"] = Utility.EncryptQS(InstitueObserveManager[0]["InsObserveId"].ToString());

        if (string.IsNullOrEmpty(PageMode))
        {
            this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());
            return;
        }
        SetMode(PageMode);
    }

    private void SetMode(string PageMode)
    {
        if (string.IsNullOrEmpty(PageMode))
        {
            this.Response.Redirect("~/ErrorPage.aspx?ErrorNo=" + ((int)ErrorCodes.ErrorType.PageInputsNotValid).ToString());
            return;
        }
        switch (PageMode)
        {
            case "View":
                SetViewModeKeys();
                break;

            case "New":
                SetNewModeKeys();
                break;

            case "Edit":
                SetEditModeKeys();
                break;
        }
    }

    private void SetViewModeKeys()
    {
        //Check UserPermission
        TSP.DataManager.Permission per = TSP.DataManager.InstitueObserveManager.GetUserPermission(int.Parse(Session["Login"].ToString()), (TSP.DataManager.UserType)int.Parse(Session["LoginType"].ToString()));
        //ُSet Buttom's Enabled        
        btnSave.Enabled = false;
        btnSave2.Enabled = false;

        DisableControls();

        string InsObserveId = HiddenFieldInstitueObserve["InsObserveId"].ToString();

        // FillForm(int.Parse(InsObserveId));
        btnSave.Enabled = false;
        btnSave2.Enabled = false;
        RoundPanelJudgment.HeaderText = "مشاهده";

        this.ViewState["BtnSave"] = btnSave.Enabled;
    }

    private void SetNewModeKeys()
    {
        //Set Button's Enable
        TSP.DataManager.Permission per = TSP.DataManager.InstitueObserveManager.GetUserPermission(int.Parse(Session["Login"].ToString()), (TSP.DataManager.UserType)int.Parse(Session["LoginType"].ToString()));
        ClearForm();
        EnableControls();

        btnSave.Enabled = per.CanNew;
        btnSave2.Enabled = per.CanNew;
        this.ViewState["BtnSave"] = btnSave.Enabled;
        string InsId = Utility.DecryptQS(HiddenFieldInstitueObserve["InsId"].ToString());
        FillFormInstitue(int.Parse(InsId));
        RoundPanelJudgment.HeaderText = "جدید";
    }

    private void SetEditModeKeys()
    {
        //Set Button's Enable
        TSP.DataManager.Permission per = TSP.DataManager.InstitueObserveManager.GetUserPermission(int.Parse(Session["Login"].ToString()), (TSP.DataManager.UserType)int.Parse(Session["LoginType"].ToString()));
        EnableControls();

        btnSave.Enabled = per.CanEdit;
        btnSave2.Enabled = per.CanEdit;
        this.ViewState["BtnSave"] = btnSave.Enabled;
        string InsId = Utility.DecryptQS(HiddenFieldInstitueObserve["InsId"].ToString());
        FillFormInstitue(int.Parse(InsId));
        string InsObserveId = Utility.DecryptQS(HiddenFieldInstitueObserve["InsObserveId"].ToString());
        FillFormObserve(int.Parse(InsObserveId));
        RoundPanelJudgment.HeaderText = "ویرایش";
    }


    private void ClearForm()
    {

    }

    private void DisableControls()
    {
        txtViewPoint.Enabled = false;
        rbtnAirCondition.Enabled = false;
        rbtnBeauty.Enabled = false;
        rbtnChair.Enabled = false;
        rbtnComputerLab.Enabled = false;
        rbtnInternet.Enabled = false;
        rbtnLearningEquipment.Enabled = false;
        rbtnLight.Enabled = false;
        rbtnOfficeAutomation.Enabled = false;
        rbtnParking.Enabled = false;
        rbtnSituation.Enabled = false;
        rbtnStore.Enabled = false;
    }

    private void EnableControls()
    {
        txtViewPoint.Enabled = true;
        rbtnAirCondition.Enabled = true;
        rbtnBeauty.Enabled = true;
        rbtnChair.Enabled = true;
        rbtnComputerLab.Enabled = true;
        rbtnInternet.Enabled = true;
        rbtnLearningEquipment.Enabled = true;
        rbtnLight.Enabled = true;
        rbtnOfficeAutomation.Enabled = true;
        rbtnParking.Enabled = true;
        rbtnSituation.Enabled = true;
        rbtnStore.Enabled = true;
    }

    private void FillFormInstitue(int InsId)
    {
        TSP.DataManager.InstitueManager InstitueManager = new TSP.DataManager.InstitueManager();
        InstitueManager.FindByCode(InsId);
        if (InstitueManager.Count > 0)
        {
            txtInsAddress.Text = InstitueManager[0]["Address"].ToString();
            txtInsManager.Text = InstitueManager[0]["Manager"].ToString();
            txtxInsName.Text = InstitueManager[0]["InsName"].ToString();
        }
    }

    private void FillFormObserve(int InsObserveId)
    {
        TSP.DataManager.InstitueObserveManager InstitueObserveManager = new TSP.DataManager.InstitueObserveManager();
        InstitueObserveManager.FindByCode(InsObserveId);
        if (InstitueObserveManager.Count > 0)
        {
            txtViewPoint.Text = InstitueObserveManager[0]["Description"].ToString();
            rbtnStore.SelectedIndex = int.Parse(InstitueObserveManager[0]["Store"].ToString());
            rbtnSituation.SelectedIndex = int.Parse(InstitueObserveManager[0]["Situation"].ToString());
            rbtnParking.SelectedIndex = int.Parse(InstitueObserveManager[0]["Parking"].ToString());
            rbtnOfficeAutomation.SelectedIndex = int.Parse(InstitueObserveManager[0]["OfficeAutomation"].ToString());
            rbtnLight.SelectedIndex = int.Parse(InstitueObserveManager[0]["Light"].ToString());
            rbtnLearningEquipment.SelectedIndex = int.Parse(InstitueObserveManager[0]["LearningEquipment"].ToString());
            rbtnInternet.SelectedIndex = int.Parse(InstitueObserveManager[0]["Internet"].ToString());
            rbtnComputerLab.SelectedIndex = int.Parse(InstitueObserveManager[0]["ComputerLab"].ToString());
            rbtnChair.SelectedIndex = int.Parse(InstitueObserveManager[0]["Chair"].ToString());
            rbtnBeauty.SelectedIndex = int.Parse(InstitueObserveManager[0]["Beauty"].ToString());
            rbtnAirCondition.SelectedIndex = int.Parse(InstitueObserveManager[0]["AirCondition"].ToString());

        }
    }

    private void EditObserve(int InsObserveId)
    {
        if (IsPageRefresh)
            return;
        TSP.DataManager.InstitueObserveManager InstitueObserveManager = new TSP.DataManager.InstitueObserveManager();
        try
        {
            InstitueObserveManager.FindByCode(InsObserveId);

            InstitueObserveManager[0].BeginEdit();
            InstitueObserveManager[0]["Situation"] = rbtnSituation.SelectedIndex;
            InstitueObserveManager[0]["Light"] = rbtnLight.SelectedIndex;
            InstitueObserveManager[0]["AirCondition"] = rbtnAirCondition.SelectedIndex;
            InstitueObserveManager[0]["Beauty"] = rbtnBeauty.SelectedIndex;
            InstitueObserveManager[0]["Internet"] = rbtnInternet.SelectedIndex;
            InstitueObserveManager[0]["LearningEquipment"] = rbtnLearningEquipment.SelectedIndex;
            InstitueObserveManager[0]["ComputerLab"] = rbtnComputerLab.SelectedIndex;
            InstitueObserveManager[0]["OfficeAutomation"] = rbtnOfficeAutomation.SelectedIndex;
            InstitueObserveManager[0]["Store"] = rbtnStore.SelectedIndex;
            InstitueObserveManager[0]["Parking"] = rbtnParking.SelectedIndex;
            InstitueObserveManager[0]["Chair"] = rbtnChair.SelectedIndex;
            InstitueObserveManager[0]["Description"] = txtViewPoint.Text;

            InstitueObserveManager[0].EndEdit();
            int cn = InstitueObserveManager.Save();
            if (cn > 0)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "ذخیره انجام شد.";
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }
        catch (Exception err)
        {
            SetError(err);
        }
    }

    private void InsertObserve()
    {

    }

    private void SetDeleteError(Exception err)
    {

        if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
        {
            System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;
            if (se.Number == 547)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "به علت وجود اطلاعات وابسته امکان حذف نمی باشد.";
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در حذف انجام گرفته است";
            }
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "خطایی در حذف انجام گرفته است";
        }
    }

    private void SetError(Exception err)
    {
        if (err.GetType() == typeof(System.Data.SqlClient.SqlException))
        {
            System.Data.SqlClient.SqlException se = (System.Data.SqlClient.SqlException)err;

            if (se.Number == 2601)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "اطلاعات تکراری می باشد";
            }
            else if (se.Number == 2627)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "کد تکراری می باشد";
            }
            else if (se.Number == 547)
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "به علت وجود اطلاعات وابسته امکان حذف نمی باشد.";
            }
            else
            {
                this.DivReport.Visible = true;
                this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
            }
        }
        else
        {
            this.DivReport.Visible = true;
            this.LabelWarning.Text = "خطایی در ذخیره انجام گرفته است";
        }
    }

    #endregion
}
